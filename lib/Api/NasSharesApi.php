<?php
/**
 * NasSharesApi
 * PHP version 5
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NodeumSDK\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NodeumSDK\Client\ApiException;
use NodeumSDK\Client\Configuration;
use NodeumSDK\Client\HeaderSelector;
use NodeumSDK\Client\ObjectSerializer;

/**
 * NasSharesApi Class Doc Comment
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NasSharesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNasShareByNas
     *
     * Creates a new NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShare|\NodeumSDK\Client\Model\Error
     */
    public function createNasShareByNas($nas_id, $nas_share_body)
    {
        list($response) = $this->createNasShareByNasWithHttpInfo($nas_id, $nas_share_body);
        return $response;
    }

    /**
     * Operation createNasShareByNasWithHttpInfo
     *
     * Creates a new NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShare|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNasShareByNasWithHttpInfo($nas_id, $nas_share_body)
    {
        $request = $this->createNasShareByNasRequest($nas_id, $nas_share_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\NodeumSDK\Client\Model\NasShare' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShare', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShare';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNasShareByNasAsync
     *
     * Creates a new NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNasShareByNasAsync($nas_id, $nas_share_body)
    {
        return $this->createNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNasShareByNasAsyncWithHttpInfo
     *
     * Creates a new NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_body)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShare';
        $request = $this->createNasShareByNasRequest($nas_id, $nas_share_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNasShareByNas'
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNasShareByNasRequest($nas_id, $nas_share_body)
    {
        // verify the required parameter 'nas_id' is set
        if ($nas_id === null || (is_array($nas_id) && count($nas_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_id when calling createNasShareByNas'
            );
        }
        // verify the required parameter 'nas_share_body' is set
        if ($nas_share_body === null || (is_array($nas_share_body) && count($nas_share_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_body when calling createNasShareByNas'
            );
        }

        $resourcePath = '/nas/{nas_id}/nas_shares';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_id' . '}',
                ObjectSerializer::toPathValue($nas_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($nas_share_body)) {
            $_tempBody = $nas_share_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyNasShare
     *
     * Destroys a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyNasShare($nas_share_id)
    {
        $this->destroyNasShareWithHttpInfo($nas_share_id);
    }

    /**
     * Operation destroyNasShareWithHttpInfo
     *
     * Destroys a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyNasShareWithHttpInfo($nas_share_id)
    {
        $request = $this->destroyNasShareRequest($nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyNasShareAsync
     *
     * Destroys a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyNasShareAsync($nas_share_id)
    {
        return $this->destroyNasShareAsyncWithHttpInfo($nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyNasShareAsyncWithHttpInfo
     *
     * Destroys a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyNasShareAsyncWithHttpInfo($nas_share_id)
    {
        $returnType = '';
        $request = $this->destroyNasShareRequest($nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyNasShare'
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyNasShareRequest($nas_share_id)
    {
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling destroyNasShare'
            );
        }

        $resourcePath = '/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyNasShareByNas
     *
     * Destroys a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyNasShareByNas($nas_id, $nas_share_id)
    {
        $this->destroyNasShareByNasWithHttpInfo($nas_id, $nas_share_id);
    }

    /**
     * Operation destroyNasShareByNasWithHttpInfo
     *
     * Destroys a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyNasShareByNasWithHttpInfo($nas_id, $nas_share_id)
    {
        $request = $this->destroyNasShareByNasRequest($nas_id, $nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyNasShareByNasAsync
     *
     * Destroys a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyNasShareByNasAsync($nas_id, $nas_share_id)
    {
        return $this->destroyNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyNasShareByNasAsyncWithHttpInfo
     *
     * Destroys a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_id)
    {
        $returnType = '';
        $request = $this->destroyNasShareByNasRequest($nas_id, $nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyNasShareByNas'
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyNasShareByNasRequest($nas_id, $nas_share_id)
    {
        // verify the required parameter 'nas_id' is set
        if ($nas_id === null || (is_array($nas_id) && count($nas_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_id when calling destroyNasShareByNas'
            );
        }
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling destroyNasShareByNas'
            );
        }

        $resourcePath = '/nas/{nas_id}/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_id' . '}',
                ObjectSerializer::toPathValue($nas_id),
                $resourcePath
            );
        }
        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyNasShareByPool
     *
     * Destroys a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyNasShareByPool($pool_id, $nas_share_id)
    {
        $this->destroyNasShareByPoolWithHttpInfo($pool_id, $nas_share_id);
    }

    /**
     * Operation destroyNasShareByPoolWithHttpInfo
     *
     * Destroys a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyNasShareByPoolWithHttpInfo($pool_id, $nas_share_id)
    {
        $request = $this->destroyNasShareByPoolRequest($pool_id, $nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyNasShareByPoolAsync
     *
     * Destroys a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyNasShareByPoolAsync($pool_id, $nas_share_id)
    {
        return $this->destroyNasShareByPoolAsyncWithHttpInfo($pool_id, $nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyNasShareByPoolAsyncWithHttpInfo
     *
     * Destroys a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyNasShareByPoolAsyncWithHttpInfo($pool_id, $nas_share_id)
    {
        $returnType = '';
        $request = $this->destroyNasShareByPoolRequest($pool_id, $nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyNasShareByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyNasShareByPoolRequest($pool_id, $nas_share_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling destroyNasShareByPool'
            );
        }
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling destroyNasShareByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexNasShares
     *
     * Lists all NAS shares.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShareCollection
     */
    public function indexNasShares($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null, $pool_id = null)
    {
        list($response) = $this->indexNasSharesWithHttpInfo($limit, $offset, $sort_by, $id, $name, $path, $options, $username, $nas_id, $pool_id);
        return $response;
    }

    /**
     * Operation indexNasSharesWithHttpInfo
     *
     * Lists all NAS shares.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShareCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexNasSharesWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null, $pool_id = null)
    {
        $request = $this->indexNasSharesRequest($limit, $offset, $sort_by, $id, $name, $path, $options, $username, $nas_id, $pool_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShareCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShareCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShareCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShareCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexNasSharesAsync
     *
     * Lists all NAS shares.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexNasSharesAsync($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null, $pool_id = null)
    {
        return $this->indexNasSharesAsyncWithHttpInfo($limit, $offset, $sort_by, $id, $name, $path, $options, $username, $nas_id, $pool_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexNasSharesAsyncWithHttpInfo
     *
     * Lists all NAS shares.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexNasSharesAsyncWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null, $pool_id = null)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShareCollection';
        $request = $this->indexNasSharesRequest($limit, $offset, $sort_by, $id, $name, $path, $options, $username, $nas_id, $pool_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexNasShares'
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexNasSharesRequest($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null, $pool_id = null)
    {

        $resourcePath = '/nas_shares';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($path)) {
            $path = ObjectSerializer::serializeCollection($path, '', true);
        }
        if ($path !== null) {
            $queryParams['path'] = $path;
        }
        // query params
        if (is_array($options)) {
            $options = ObjectSerializer::serializeCollection($options, '', true);
        }
        if ($options !== null) {
            $queryParams['options'] = $options;
        }
        // query params
        if (is_array($username)) {
            $username = ObjectSerializer::serializeCollection($username, '', true);
        }
        if ($username !== null) {
            $queryParams['username'] = $username;
        }
        // query params
        if (is_array($nas_id)) {
            $nas_id = ObjectSerializer::serializeCollection($nas_id, '', true);
        }
        if ($nas_id !== null) {
            $queryParams['nas_id'] = $nas_id;
        }
        // query params
        if (is_array($pool_id)) {
            $pool_id = ObjectSerializer::serializeCollection($pool_id, '', true);
        }
        if ($pool_id !== null) {
            $queryParams['pool_id'] = $pool_id;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexNasSharesByNas
     *
     * Lists all NAS shares.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShareCollection
     */
    public function indexNasSharesByNas($nas_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $pool_id = null)
    {
        list($response) = $this->indexNasSharesByNasWithHttpInfo($nas_id, $limit, $offset, $sort_by, $id, $name, $path, $options, $username, $pool_id);
        return $response;
    }

    /**
     * Operation indexNasSharesByNasWithHttpInfo
     *
     * Lists all NAS shares.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShareCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexNasSharesByNasWithHttpInfo($nas_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $pool_id = null)
    {
        $request = $this->indexNasSharesByNasRequest($nas_id, $limit, $offset, $sort_by, $id, $name, $path, $options, $username, $pool_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShareCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShareCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShareCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShareCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexNasSharesByNasAsync
     *
     * Lists all NAS shares.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexNasSharesByNasAsync($nas_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $pool_id = null)
    {
        return $this->indexNasSharesByNasAsyncWithHttpInfo($nas_id, $limit, $offset, $sort_by, $id, $name, $path, $options, $username, $pool_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexNasSharesByNasAsyncWithHttpInfo
     *
     * Lists all NAS shares.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexNasSharesByNasAsyncWithHttpInfo($nas_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $pool_id = null)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShareCollection';
        $request = $this->indexNasSharesByNasRequest($nas_id, $limit, $offset, $sort_by, $id, $name, $path, $options, $username, $pool_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexNasSharesByNas'
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexNasSharesByNasRequest($nas_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $pool_id = null)
    {
        // verify the required parameter 'nas_id' is set
        if ($nas_id === null || (is_array($nas_id) && count($nas_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_id when calling indexNasSharesByNas'
            );
        }

        $resourcePath = '/nas/{nas_id}/nas_shares';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($path)) {
            $path = ObjectSerializer::serializeCollection($path, '', true);
        }
        if ($path !== null) {
            $queryParams['path'] = $path;
        }
        // query params
        if (is_array($options)) {
            $options = ObjectSerializer::serializeCollection($options, '', true);
        }
        if ($options !== null) {
            $queryParams['options'] = $options;
        }
        // query params
        if (is_array($username)) {
            $username = ObjectSerializer::serializeCollection($username, '', true);
        }
        if ($username !== null) {
            $queryParams['username'] = $username;
        }
        // query params
        if (is_array($pool_id)) {
            $pool_id = ObjectSerializer::serializeCollection($pool_id, '', true);
        }
        if ($pool_id !== null) {
            $queryParams['pool_id'] = $pool_id;
        }


        // path params
        if ($nas_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_id' . '}',
                ObjectSerializer::toPathValue($nas_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexNasSharesByPool
     *
     * Lists all NAS shares from pool.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShareCollection
     */
    public function indexNasSharesByPool($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null)
    {
        list($response) = $this->indexNasSharesByPoolWithHttpInfo($pool_id, $limit, $offset, $sort_by, $id, $name, $path, $options, $username, $nas_id);
        return $response;
    }

    /**
     * Operation indexNasSharesByPoolWithHttpInfo
     *
     * Lists all NAS shares from pool.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShareCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexNasSharesByPoolWithHttpInfo($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null)
    {
        $request = $this->indexNasSharesByPoolRequest($pool_id, $limit, $offset, $sort_by, $id, $name, $path, $options, $username, $nas_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShareCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShareCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShareCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShareCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexNasSharesByPoolAsync
     *
     * Lists all NAS shares from pool.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexNasSharesByPoolAsync($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null)
    {
        return $this->indexNasSharesByPoolAsyncWithHttpInfo($pool_id, $limit, $offset, $sort_by, $id, $name, $path, $options, $username, $nas_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexNasSharesByPoolAsyncWithHttpInfo
     *
     * Lists all NAS shares from pool.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexNasSharesByPoolAsyncWithHttpInfo($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShareCollection';
        $request = $this->indexNasSharesByPoolRequest($pool_id, $limit, $offset, $sort_by, $id, $name, $path, $options, $username, $nas_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexNasSharesByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $path Filter on path (optional)
     * @param  string $options Filter on options (optional)
     * @param  string $username Filter on username (optional)
     * @param  string $nas_id Filter on NAS id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexNasSharesByPoolRequest($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $path = null, $options = null, $username = null, $nas_id = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling indexNasSharesByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/nas_shares';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($path)) {
            $path = ObjectSerializer::serializeCollection($path, '', true);
        }
        if ($path !== null) {
            $queryParams['path'] = $path;
        }
        // query params
        if (is_array($options)) {
            $options = ObjectSerializer::serializeCollection($options, '', true);
        }
        if ($options !== null) {
            $queryParams['options'] = $options;
        }
        // query params
        if (is_array($username)) {
            $username = ObjectSerializer::serializeCollection($username, '', true);
        }
        if ($username !== null) {
            $queryParams['username'] = $username;
        }
        // query params
        if (is_array($nas_id)) {
            $nas_id = ObjectSerializer::serializeCollection($nas_id, '', true);
        }
        if ($nas_id !== null) {
            $queryParams['nas_id'] = $nas_id;
        }


        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusNasShare
     *
     * Get mount status of NAS Share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusNasShare($nas_share_id)
    {
        list($response) = $this->mountStatusNasShareWithHttpInfo($nas_share_id);
        return $response;
    }

    /**
     * Operation mountStatusNasShareWithHttpInfo
     *
     * Get mount status of NAS Share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusNasShareWithHttpInfo($nas_share_id)
    {
        $request = $this->mountStatusNasShareRequest($nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusNasShareAsync
     *
     * Get mount status of NAS Share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusNasShareAsync($nas_share_id)
    {
        return $this->mountStatusNasShareAsyncWithHttpInfo($nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusNasShareAsyncWithHttpInfo
     *
     * Get mount status of NAS Share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusNasShareAsyncWithHttpInfo($nas_share_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusNasShareRequest($nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusNasShare'
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusNasShareRequest($nas_share_id)
    {
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling mountStatusNasShare'
            );
        }

        $resourcePath = '/nas_shares/{nas_share_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusNasShareByNas
     *
     * Get mount status of NAS Share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusNasShareByNas($nas_id, $nas_share_id)
    {
        list($response) = $this->mountStatusNasShareByNasWithHttpInfo($nas_id, $nas_share_id);
        return $response;
    }

    /**
     * Operation mountStatusNasShareByNasWithHttpInfo
     *
     * Get mount status of NAS Share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusNasShareByNasWithHttpInfo($nas_id, $nas_share_id)
    {
        $request = $this->mountStatusNasShareByNasRequest($nas_id, $nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusNasShareByNasAsync
     *
     * Get mount status of NAS Share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusNasShareByNasAsync($nas_id, $nas_share_id)
    {
        return $this->mountStatusNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusNasShareByNasAsyncWithHttpInfo
     *
     * Get mount status of NAS Share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusNasShareByNasRequest($nas_id, $nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusNasShareByNas'
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusNasShareByNasRequest($nas_id, $nas_share_id)
    {
        // verify the required parameter 'nas_id' is set
        if ($nas_id === null || (is_array($nas_id) && count($nas_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_id when calling mountStatusNasShareByNas'
            );
        }
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling mountStatusNasShareByNas'
            );
        }

        $resourcePath = '/nas/{nas_id}/nas_shares/{nas_share_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_id' . '}',
                ObjectSerializer::toPathValue($nas_id),
                $resourcePath
            );
        }
        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusNasShareByPool
     *
     * Get mount status of NAS Share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusNasShareByPool($pool_id, $nas_share_id)
    {
        list($response) = $this->mountStatusNasShareByPoolWithHttpInfo($pool_id, $nas_share_id);
        return $response;
    }

    /**
     * Operation mountStatusNasShareByPoolWithHttpInfo
     *
     * Get mount status of NAS Share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusNasShareByPoolWithHttpInfo($pool_id, $nas_share_id)
    {
        $request = $this->mountStatusNasShareByPoolRequest($pool_id, $nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusNasShareByPoolAsync
     *
     * Get mount status of NAS Share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusNasShareByPoolAsync($pool_id, $nas_share_id)
    {
        return $this->mountStatusNasShareByPoolAsyncWithHttpInfo($pool_id, $nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusNasShareByPoolAsyncWithHttpInfo
     *
     * Get mount status of NAS Share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusNasShareByPoolAsyncWithHttpInfo($pool_id, $nas_share_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusNasShareByPoolRequest($pool_id, $nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusNasShareByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusNasShareByPoolRequest($pool_id, $nas_share_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling mountStatusNasShareByPool'
            );
        }
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling mountStatusNasShareByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/nas_shares/{nas_share_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showNasShare
     *
     * Displays a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShare
     */
    public function showNasShare($nas_share_id)
    {
        list($response) = $this->showNasShareWithHttpInfo($nas_share_id);
        return $response;
    }

    /**
     * Operation showNasShareWithHttpInfo
     *
     * Displays a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShare, HTTP status code, HTTP response headers (array of strings)
     */
    public function showNasShareWithHttpInfo($nas_share_id)
    {
        $request = $this->showNasShareRequest($nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShare' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShare', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShare';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showNasShareAsync
     *
     * Displays a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showNasShareAsync($nas_share_id)
    {
        return $this->showNasShareAsyncWithHttpInfo($nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showNasShareAsyncWithHttpInfo
     *
     * Displays a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showNasShareAsyncWithHttpInfo($nas_share_id)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShare';
        $request = $this->showNasShareRequest($nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showNasShare'
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showNasShareRequest($nas_share_id)
    {
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling showNasShare'
            );
        }

        $resourcePath = '/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showNasShareByNas
     *
     * Displays a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShare
     */
    public function showNasShareByNas($nas_id, $nas_share_id)
    {
        list($response) = $this->showNasShareByNasWithHttpInfo($nas_id, $nas_share_id);
        return $response;
    }

    /**
     * Operation showNasShareByNasWithHttpInfo
     *
     * Displays a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShare, HTTP status code, HTTP response headers (array of strings)
     */
    public function showNasShareByNasWithHttpInfo($nas_id, $nas_share_id)
    {
        $request = $this->showNasShareByNasRequest($nas_id, $nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShare' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShare', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShare';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showNasShareByNasAsync
     *
     * Displays a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showNasShareByNasAsync($nas_id, $nas_share_id)
    {
        return $this->showNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showNasShareByNasAsyncWithHttpInfo
     *
     * Displays a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_id)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShare';
        $request = $this->showNasShareByNasRequest($nas_id, $nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showNasShareByNas'
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showNasShareByNasRequest($nas_id, $nas_share_id)
    {
        // verify the required parameter 'nas_id' is set
        if ($nas_id === null || (is_array($nas_id) && count($nas_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_id when calling showNasShareByNas'
            );
        }
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling showNasShareByNas'
            );
        }

        $resourcePath = '/nas/{nas_id}/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_id' . '}',
                ObjectSerializer::toPathValue($nas_id),
                $resourcePath
            );
        }
        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showNasShareByPool
     *
     * Displays a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShare
     */
    public function showNasShareByPool($pool_id, $nas_share_id)
    {
        list($response) = $this->showNasShareByPoolWithHttpInfo($pool_id, $nas_share_id);
        return $response;
    }

    /**
     * Operation showNasShareByPoolWithHttpInfo
     *
     * Displays a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShare, HTTP status code, HTTP response headers (array of strings)
     */
    public function showNasShareByPoolWithHttpInfo($pool_id, $nas_share_id)
    {
        $request = $this->showNasShareByPoolRequest($pool_id, $nas_share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShare' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShare', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShare';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showNasShareByPoolAsync
     *
     * Displays a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showNasShareByPoolAsync($pool_id, $nas_share_id)
    {
        return $this->showNasShareByPoolAsyncWithHttpInfo($pool_id, $nas_share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showNasShareByPoolAsyncWithHttpInfo
     *
     * Displays a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showNasShareByPoolAsyncWithHttpInfo($pool_id, $nas_share_id)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShare';
        $request = $this->showNasShareByPoolRequest($pool_id, $nas_share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showNasShareByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showNasShareByPoolRequest($pool_id, $nas_share_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling showNasShareByPool'
            );
        }
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling showNasShareByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testNasShare
     *
     * Test an unsaved NAS Share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\ActiveJobStatus
     */
    public function testNasShare($nas_id, $nas_share_body)
    {
        list($response) = $this->testNasShareWithHttpInfo($nas_id, $nas_share_body);
        return $response;
    }

    /**
     * Operation testNasShareWithHttpInfo
     *
     * Test an unsaved NAS Share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\ActiveJobStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function testNasShareWithHttpInfo($nas_id, $nas_share_body)
    {
        $request = $this->testNasShareRequest($nas_id, $nas_share_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\NodeumSDK\Client\Model\ActiveJobStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ActiveJobStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\ActiveJobStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ActiveJobStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testNasShareAsync
     *
     * Test an unsaved NAS Share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testNasShareAsync($nas_id, $nas_share_body)
    {
        return $this->testNasShareAsyncWithHttpInfo($nas_id, $nas_share_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testNasShareAsyncWithHttpInfo
     *
     * Test an unsaved NAS Share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testNasShareAsyncWithHttpInfo($nas_id, $nas_share_body)
    {
        $returnType = '\NodeumSDK\Client\Model\ActiveJobStatus';
        $request = $this->testNasShareRequest($nas_id, $nas_share_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testNasShare'
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testNasShareRequest($nas_id, $nas_share_body)
    {
        // verify the required parameter 'nas_id' is set
        if ($nas_id === null || (is_array($nas_id) && count($nas_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_id when calling testNasShare'
            );
        }
        // verify the required parameter 'nas_share_body' is set
        if ($nas_share_body === null || (is_array($nas_share_body) && count($nas_share_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_body when calling testNasShare'
            );
        }

        $resourcePath = '/nas/{nas_id}/nas_shares/-/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_id' . '}',
                ObjectSerializer::toPathValue($nas_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($nas_share_body)) {
            $_tempBody = $nas_share_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'queued', 'working', 'failed']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'queued', 'working', 'failed'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testResultNasShare
     *
     * Check result of a NAS Share test job.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\ActiveJobStatus|\NodeumSDK\Client\Model\ActiveJobStatus
     */
    public function testResultNasShare($nas_id, $job_id)
    {
        list($response) = $this->testResultNasShareWithHttpInfo($nas_id, $job_id);
        return $response;
    }

    /**
     * Operation testResultNasShareWithHttpInfo
     *
     * Check result of a NAS Share test job.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\ActiveJobStatus|\NodeumSDK\Client\Model\ActiveJobStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function testResultNasShareWithHttpInfo($nas_id, $job_id)
    {
        $request = $this->testResultNasShareRequest($nas_id, $job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\ActiveJobStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ActiveJobStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\NodeumSDK\Client\Model\ActiveJobStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ActiveJobStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\ActiveJobStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ActiveJobStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ActiveJobStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testResultNasShareAsync
     *
     * Check result of a NAS Share test job.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testResultNasShareAsync($nas_id, $job_id)
    {
        return $this->testResultNasShareAsyncWithHttpInfo($nas_id, $job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testResultNasShareAsyncWithHttpInfo
     *
     * Check result of a NAS Share test job.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testResultNasShareAsyncWithHttpInfo($nas_id, $job_id)
    {
        $returnType = '\NodeumSDK\Client\Model\ActiveJobStatus';
        $request = $this->testResultNasShareRequest($nas_id, $job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testResultNasShare'
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testResultNasShareRequest($nas_id, $job_id)
    {
        // verify the required parameter 'nas_id' is set
        if ($nas_id === null || (is_array($nas_id) && count($nas_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_id when calling testResultNasShare'
            );
        }
        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling testResultNasShare'
            );
        }

        $resourcePath = '/nas/{nas_id}/nas_shares/-/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($job_id)) {
            $job_id = ObjectSerializer::serializeCollection($job_id, '', true);
        }
        if ($job_id !== null) {
            $queryParams['job_id'] = $job_id;
        }


        // path params
        if ($nas_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_id' . '}',
                ObjectSerializer::toPathValue($nas_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'queued', 'working', 'failed']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'queued', 'working', 'failed'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNasShare
     *
     * Updates a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShare|\NodeumSDK\Client\Model\Error
     */
    public function updateNasShare($nas_share_id, $nas_share_body)
    {
        list($response) = $this->updateNasShareWithHttpInfo($nas_share_id, $nas_share_body);
        return $response;
    }

    /**
     * Operation updateNasShareWithHttpInfo
     *
     * Updates a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShare|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNasShareWithHttpInfo($nas_share_id, $nas_share_body)
    {
        $request = $this->updateNasShareRequest($nas_share_id, $nas_share_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShare' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShare', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShare';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNasShareAsync
     *
     * Updates a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNasShareAsync($nas_share_id, $nas_share_body)
    {
        return $this->updateNasShareAsyncWithHttpInfo($nas_share_id, $nas_share_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNasShareAsyncWithHttpInfo
     *
     * Updates a specific NAS share.
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNasShareAsyncWithHttpInfo($nas_share_id, $nas_share_body)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShare';
        $request = $this->updateNasShareRequest($nas_share_id, $nas_share_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNasShare'
     *
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNasShareRequest($nas_share_id, $nas_share_body)
    {
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling updateNasShare'
            );
        }
        // verify the required parameter 'nas_share_body' is set
        if ($nas_share_body === null || (is_array($nas_share_body) && count($nas_share_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_body when calling updateNasShare'
            );
        }

        $resourcePath = '/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($nas_share_body)) {
            $_tempBody = $nas_share_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNasShareByNas
     *
     * Updates a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShare|\NodeumSDK\Client\Model\Error
     */
    public function updateNasShareByNas($nas_id, $nas_share_id, $nas_share_body)
    {
        list($response) = $this->updateNasShareByNasWithHttpInfo($nas_id, $nas_share_id, $nas_share_body);
        return $response;
    }

    /**
     * Operation updateNasShareByNasWithHttpInfo
     *
     * Updates a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShare|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNasShareByNasWithHttpInfo($nas_id, $nas_share_id, $nas_share_body)
    {
        $request = $this->updateNasShareByNasRequest($nas_id, $nas_share_id, $nas_share_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShare' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShare', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShare';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNasShareByNasAsync
     *
     * Updates a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNasShareByNasAsync($nas_id, $nas_share_id, $nas_share_body)
    {
        return $this->updateNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_id, $nas_share_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNasShareByNasAsyncWithHttpInfo
     *
     * Updates a specific NAS share.
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNasShareByNasAsyncWithHttpInfo($nas_id, $nas_share_id, $nas_share_body)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShare';
        $request = $this->updateNasShareByNasRequest($nas_id, $nas_share_id, $nas_share_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNasShareByNas'
     *
     * @param  string $nas_id Numeric ID or name of NAS. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNasShareByNasRequest($nas_id, $nas_share_id, $nas_share_body)
    {
        // verify the required parameter 'nas_id' is set
        if ($nas_id === null || (is_array($nas_id) && count($nas_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_id when calling updateNasShareByNas'
            );
        }
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling updateNasShareByNas'
            );
        }
        // verify the required parameter 'nas_share_body' is set
        if ($nas_share_body === null || (is_array($nas_share_body) && count($nas_share_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_body when calling updateNasShareByNas'
            );
        }

        $resourcePath = '/nas/{nas_id}/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($nas_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_id' . '}',
                ObjectSerializer::toPathValue($nas_id),
                $resourcePath
            );
        }
        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($nas_share_body)) {
            $_tempBody = $nas_share_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNasShareByPool
     *
     * Updates a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\NasShare|\NodeumSDK\Client\Model\Error
     */
    public function updateNasShareByPool($pool_id, $nas_share_id, $nas_share_body)
    {
        list($response) = $this->updateNasShareByPoolWithHttpInfo($pool_id, $nas_share_id, $nas_share_body);
        return $response;
    }

    /**
     * Operation updateNasShareByPoolWithHttpInfo
     *
     * Updates a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\NasShare|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNasShareByPoolWithHttpInfo($pool_id, $nas_share_id, $nas_share_body)
    {
        $request = $this->updateNasShareByPoolRequest($pool_id, $nas_share_id, $nas_share_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\NasShare' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\NasShare', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\NasShare';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\NasShare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNasShareByPoolAsync
     *
     * Updates a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNasShareByPoolAsync($pool_id, $nas_share_id, $nas_share_body)
    {
        return $this->updateNasShareByPoolAsyncWithHttpInfo($pool_id, $nas_share_id, $nas_share_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNasShareByPoolAsyncWithHttpInfo
     *
     * Updates a specific NAS share.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNasShareByPoolAsyncWithHttpInfo($pool_id, $nas_share_id, $nas_share_body)
    {
        $returnType = '\NodeumSDK\Client\Model\NasShare';
        $request = $this->updateNasShareByPoolRequest($pool_id, $nas_share_id, $nas_share_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNasShareByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $nas_share_id Numeric ID or name of NAS share. (required)
     * @param  \NodeumSDK\Client\Model\NasShare $nas_share_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNasShareByPoolRequest($pool_id, $nas_share_id, $nas_share_body)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling updateNasShareByPool'
            );
        }
        // verify the required parameter 'nas_share_id' is set
        if ($nas_share_id === null || (is_array($nas_share_id) && count($nas_share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_id when calling updateNasShareByPool'
            );
        }
        // verify the required parameter 'nas_share_body' is set
        if ($nas_share_body === null || (is_array($nas_share_body) && count($nas_share_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nas_share_body when calling updateNasShareByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/nas_shares/{nas_share_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($nas_share_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nas_share_id' . '}',
                ObjectSerializer::toPathValue($nas_share_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($nas_share_body)) {
            $_tempBody = $nas_share_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
