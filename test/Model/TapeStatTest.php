<?php
/**
 * TapeStatTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace NodeumSDK\Client;

use PHPUnit\Framework\TestCase;

/**
 * TapeStatTest Class Doc Comment
 *
 * @category    Class
 * @description TapeStat
 * @package     NodeumSDK\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class TapeStatTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "TapeStat"
     */
    public function testTapeStat()
    {
    }

    /**
     * Test attribute "log_time"
     */
    public function testPropertyLogTime()
    {
    }

    /**
     * Test attribute "barcode"
     */
    public function testPropertyBarcode()
    {
    }

    /**
     * Test attribute "mounts"
     */
    public function testPropertyMounts()
    {
    }

    /**
     * Test attribute "datasets_written"
     */
    public function testPropertyDatasetsWritten()
    {
    }

    /**
     * Test attribute "datasets_read"
     */
    public function testPropertyDatasetsRead()
    {
    }

    /**
     * Test attribute "recovered_write_data_errors"
     */
    public function testPropertyRecoveredWriteDataErrors()
    {
    }

    /**
     * Test attribute "unrecovered_write_data_errors"
     */
    public function testPropertyUnrecoveredWriteDataErrors()
    {
    }

    /**
     * Test attribute "write_servo_errors"
     */
    public function testPropertyWriteServoErrors()
    {
    }

    /**
     * Test attribute "unrecovered_write_servo_errors"
     */
    public function testPropertyUnrecoveredWriteServoErrors()
    {
    }

    /**
     * Test attribute "recovered_read_errors"
     */
    public function testPropertyRecoveredReadErrors()
    {
    }

    /**
     * Test attribute "unrecovered_read_errors"
     */
    public function testPropertyUnrecoveredReadErrors()
    {
    }

    /**
     * Test attribute "last_mount_unrecovered_write_errors"
     */
    public function testPropertyLastMountUnrecoveredWriteErrors()
    {
    }

    /**
     * Test attribute "last_mount_unrecovered_read_errors"
     */
    public function testPropertyLastMountUnrecoveredReadErrors()
    {
    }

    /**
     * Test attribute "last_mount_mbytes_written"
     */
    public function testPropertyLastMountMbytesWritten()
    {
    }

    /**
     * Test attribute "last_mount_mbytes_read"
     */
    public function testPropertyLastMountMbytesRead()
    {
    }

    /**
     * Test attribute "lifetime_mbytes_written"
     */
    public function testPropertyLifetimeMbytesWritten()
    {
    }

    /**
     * Test attribute "lifetime_mbytes_read"
     */
    public function testPropertyLifetimeMbytesRead()
    {
    }

    /**
     * Test attribute "last_load_write_compression_ratio"
     */
    public function testPropertyLastLoadWriteCompressionRatio()
    {
    }

    /**
     * Test attribute "last_load_read_compression_ratio"
     */
    public function testPropertyLastLoadReadCompressionRatio()
    {
    }

    /**
     * Test attribute "medium_mount_time"
     */
    public function testPropertyMediumMountTime()
    {
    }

    /**
     * Test attribute "medium_ready_time"
     */
    public function testPropertyMediumReadyTime()
    {
    }

    /**
     * Test attribute "total_native_capacity"
     */
    public function testPropertyTotalNativeCapacity()
    {
    }

    /**
     * Test attribute "total_used_native_capacity"
     */
    public function testPropertyTotalUsedNativeCapacity()
    {
    }

    /**
     * Test attribute "write_protect"
     */
    public function testPropertyWriteProtect()
    {
    }

    /**
     * Test attribute "worm"
     */
    public function testPropertyWorm()
    {
    }

    /**
     * Test attribute "beginning_of_medium_passes"
     */
    public function testPropertyBeginningOfMediumPasses()
    {
    }

    /**
     * Test attribute "middle_of_tape_passes"
     */
    public function testPropertyMiddleOfTapePasses()
    {
    }

    /**
     * Test attribute "read_compression_ratio"
     */
    public function testPropertyReadCompressionRatio()
    {
    }

    /**
     * Test attribute "write_compression_ratio"
     */
    public function testPropertyWriteCompressionRatio()
    {
    }

    /**
     * Test attribute "mbytes_transferred_to_app_client"
     */
    public function testPropertyMbytesTransferredToAppClient()
    {
    }

    /**
     * Test attribute "bytes_transferred_to_app_client"
     */
    public function testPropertyBytesTransferredToAppClient()
    {
    }

    /**
     * Test attribute "mbytes_read_from_medium"
     */
    public function testPropertyMbytesReadFromMedium()
    {
    }

    /**
     * Test attribute "bytes_read_from_medium"
     */
    public function testPropertyBytesReadFromMedium()
    {
    }

    /**
     * Test attribute "mbytes_transferred_from_app_client"
     */
    public function testPropertyMbytesTransferredFromAppClient()
    {
    }

    /**
     * Test attribute "bytes_transferred_from_app_client"
     */
    public function testPropertyBytesTransferredFromAppClient()
    {
    }

    /**
     * Test attribute "mbytes_written_to_medium"
     */
    public function testPropertyMbytesWrittenToMedium()
    {
    }

    /**
     * Test attribute "bytes_written_to_medium"
     */
    public function testPropertyBytesWrittenToMedium()
    {
    }

    /**
     * Test attribute "data_compression_enabled"
     */
    public function testPropertyDataCompressionEnabled()
    {
    }

    /**
     * Test attribute "write_retries"
     */
    public function testPropertyWriteRetries()
    {
    }

    /**
     * Test attribute "write_perms"
     */
    public function testPropertyWritePerms()
    {
    }

    /**
     * Test attribute "suspended_writes"
     */
    public function testPropertySuspendedWrites()
    {
    }

    /**
     * Test attribute "fatal_suspended_writes"
     */
    public function testPropertyFatalSuspendedWrites()
    {
    }

    /**
     * Test attribute "read_retries"
     */
    public function testPropertyReadRetries()
    {
    }

    /**
     * Test attribute "read_perms"
     */
    public function testPropertyReadPerms()
    {
    }

    /**
     * Test attribute "suspended_reads"
     */
    public function testPropertySuspendedReads()
    {
    }

    /**
     * Test attribute "fatal_suspended_reads"
     */
    public function testPropertyFatalSuspendedReads()
    {
    }

    /**
     * Test attribute "partition_0_remaining_capacity"
     */
    public function testPropertyPartition0RemainingCapacity()
    {
    }

    /**
     * Test attribute "partition_1_remaining_capacity"
     */
    public function testPropertyPartition1RemainingCapacity()
    {
    }

    /**
     * Test attribute "partition_0_maximum_capacity"
     */
    public function testPropertyPartition0MaximumCapacity()
    {
    }

    /**
     * Test attribute "partition_1_maximum_capacity"
     */
    public function testPropertyPartition1MaximumCapacity()
    {
    }
}
