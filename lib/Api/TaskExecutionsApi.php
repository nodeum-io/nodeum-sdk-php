<?php
/**
 * TaskExecutionsApi
 * PHP version 5
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NodeumSDK\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NodeumSDK\Client\ApiException;
use NodeumSDK\Client\Configuration;
use NodeumSDK\Client\HeaderSelector;
use NodeumSDK\Client\ObjectSerializer;

/**
 * TaskExecutionsApi Class Doc Comment
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TaskExecutionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation indexTaskExecutions
     *
     * Lists all task executions.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  bool $complete_list If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param  string $id Filter on id (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $creation_date Filter on creation date (optional)
     * @param  string $modification_date Filter on modification date (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TaskExecutionCollection
     */
    public function indexTaskExecutions($limit = null, $offset = null, $sort_by = null, $complete_list = true, $id = null, $task_id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $creation_date = null, $modification_date = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {
        list($response) = $this->indexTaskExecutionsWithHttpInfo($limit, $offset, $sort_by, $complete_list, $id, $task_id, $name, $workflow_type, $workflow_action, $source_type, $destination_type, $status, $log_time, $job_started, $job_finished, $creation_date, $modification_date, $to_process_size, $processed_size, $to_process_files, $processed_files, $finalized_files, $estimation_time, $bandwidth);
        return $response;
    }

    /**
     * Operation indexTaskExecutionsWithHttpInfo
     *
     * Lists all task executions.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  bool $complete_list If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param  string $id Filter on id (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $creation_date Filter on creation date (optional)
     * @param  string $modification_date Filter on modification date (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TaskExecutionCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTaskExecutionsWithHttpInfo($limit = null, $offset = null, $sort_by = null, $complete_list = true, $id = null, $task_id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $creation_date = null, $modification_date = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {
        $request = $this->indexTaskExecutionsRequest($limit, $offset, $sort_by, $complete_list, $id, $task_id, $name, $workflow_type, $workflow_action, $source_type, $destination_type, $status, $log_time, $job_started, $job_finished, $creation_date, $modification_date, $to_process_size, $processed_size, $to_process_files, $processed_files, $finalized_files, $estimation_time, $bandwidth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TaskExecutionCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TaskExecutionCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TaskExecutionCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TaskExecutionCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTaskExecutionsAsync
     *
     * Lists all task executions.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  bool $complete_list If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param  string $id Filter on id (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $creation_date Filter on creation date (optional)
     * @param  string $modification_date Filter on modification date (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTaskExecutionsAsync($limit = null, $offset = null, $sort_by = null, $complete_list = true, $id = null, $task_id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $creation_date = null, $modification_date = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {
        return $this->indexTaskExecutionsAsyncWithHttpInfo($limit, $offset, $sort_by, $complete_list, $id, $task_id, $name, $workflow_type, $workflow_action, $source_type, $destination_type, $status, $log_time, $job_started, $job_finished, $creation_date, $modification_date, $to_process_size, $processed_size, $to_process_files, $processed_files, $finalized_files, $estimation_time, $bandwidth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTaskExecutionsAsyncWithHttpInfo
     *
     * Lists all task executions.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  bool $complete_list If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param  string $id Filter on id (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $creation_date Filter on creation date (optional)
     * @param  string $modification_date Filter on modification date (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTaskExecutionsAsyncWithHttpInfo($limit = null, $offset = null, $sort_by = null, $complete_list = true, $id = null, $task_id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $creation_date = null, $modification_date = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {
        $returnType = '\NodeumSDK\Client\Model\TaskExecutionCollection';
        $request = $this->indexTaskExecutionsRequest($limit, $offset, $sort_by, $complete_list, $id, $task_id, $name, $workflow_type, $workflow_action, $source_type, $destination_type, $status, $log_time, $job_started, $job_finished, $creation_date, $modification_date, $to_process_size, $processed_size, $to_process_files, $processed_files, $finalized_files, $estimation_time, $bandwidth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTaskExecutions'
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  bool $complete_list If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param  string $id Filter on id (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $creation_date Filter on creation date (optional)
     * @param  string $modification_date Filter on modification date (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTaskExecutionsRequest($limit = null, $offset = null, $sort_by = null, $complete_list = true, $id = null, $task_id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $creation_date = null, $modification_date = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {

        $resourcePath = '/task_executions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($complete_list)) {
            $complete_list = ObjectSerializer::serializeCollection($complete_list, '', true);
        }
        if ($complete_list !== null) {
            $queryParams['complete_list'] = $complete_list;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($task_id)) {
            $task_id = ObjectSerializer::serializeCollection($task_id, '', true);
        }
        if ($task_id !== null) {
            $queryParams['task_id'] = $task_id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($workflow_type)) {
            $workflow_type = ObjectSerializer::serializeCollection($workflow_type, '', true);
        }
        if ($workflow_type !== null) {
            $queryParams['workflow_type'] = $workflow_type;
        }
        // query params
        if (is_array($workflow_action)) {
            $workflow_action = ObjectSerializer::serializeCollection($workflow_action, '', true);
        }
        if ($workflow_action !== null) {
            $queryParams['workflow_action'] = $workflow_action;
        }
        // query params
        if (is_array($source_type)) {
            $source_type = ObjectSerializer::serializeCollection($source_type, '', true);
        }
        if ($source_type !== null) {
            $queryParams['source_type'] = $source_type;
        }
        // query params
        if (is_array($destination_type)) {
            $destination_type = ObjectSerializer::serializeCollection($destination_type, '', true);
        }
        if ($destination_type !== null) {
            $queryParams['destination_type'] = $destination_type;
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if (is_array($log_time)) {
            $log_time = ObjectSerializer::serializeCollection($log_time, '', true);
        }
        if ($log_time !== null) {
            $queryParams['log_time'] = $log_time;
        }
        // query params
        if (is_array($job_started)) {
            $job_started = ObjectSerializer::serializeCollection($job_started, '', true);
        }
        if ($job_started !== null) {
            $queryParams['job_started'] = $job_started;
        }
        // query params
        if (is_array($job_finished)) {
            $job_finished = ObjectSerializer::serializeCollection($job_finished, '', true);
        }
        if ($job_finished !== null) {
            $queryParams['job_finished'] = $job_finished;
        }
        // query params
        if (is_array($creation_date)) {
            $creation_date = ObjectSerializer::serializeCollection($creation_date, '', true);
        }
        if ($creation_date !== null) {
            $queryParams['creation_date'] = $creation_date;
        }
        // query params
        if (is_array($modification_date)) {
            $modification_date = ObjectSerializer::serializeCollection($modification_date, '', true);
        }
        if ($modification_date !== null) {
            $queryParams['modification_date'] = $modification_date;
        }
        // query params
        if (is_array($to_process_size)) {
            $to_process_size = ObjectSerializer::serializeCollection($to_process_size, '', true);
        }
        if ($to_process_size !== null) {
            $queryParams['to_process_size'] = $to_process_size;
        }
        // query params
        if (is_array($processed_size)) {
            $processed_size = ObjectSerializer::serializeCollection($processed_size, '', true);
        }
        if ($processed_size !== null) {
            $queryParams['processed_size'] = $processed_size;
        }
        // query params
        if (is_array($to_process_files)) {
            $to_process_files = ObjectSerializer::serializeCollection($to_process_files, '', true);
        }
        if ($to_process_files !== null) {
            $queryParams['to_process_files'] = $to_process_files;
        }
        // query params
        if (is_array($processed_files)) {
            $processed_files = ObjectSerializer::serializeCollection($processed_files, '', true);
        }
        if ($processed_files !== null) {
            $queryParams['processed_files'] = $processed_files;
        }
        // query params
        if (is_array($finalized_files)) {
            $finalized_files = ObjectSerializer::serializeCollection($finalized_files, '', true);
        }
        if ($finalized_files !== null) {
            $queryParams['finalized_files'] = $finalized_files;
        }
        // query params
        if (is_array($estimation_time)) {
            $estimation_time = ObjectSerializer::serializeCollection($estimation_time, '', true);
        }
        if ($estimation_time !== null) {
            $queryParams['estimation_time'] = $estimation_time;
        }
        // query params
        if (is_array($bandwidth)) {
            $bandwidth = ObjectSerializer::serializeCollection($bandwidth, '', true);
        }
        if ($bandwidth !== null) {
            $queryParams['bandwidth'] = $bandwidth;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexTaskExecutionsByTask
     *
     * Lists all task executions.
     *
     * @param  string $task_id Filter on task id (optional)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TaskExecutionCollection
     */
    public function indexTaskExecutionsByTask($task_id = null, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {
        list($response) = $this->indexTaskExecutionsByTaskWithHttpInfo($task_id, $limit, $offset, $sort_by, $id, $name, $workflow_type, $workflow_action, $source_type, $destination_type, $status, $log_time, $job_started, $job_finished, $to_process_size, $processed_size, $to_process_files, $processed_files, $finalized_files, $estimation_time, $bandwidth);
        return $response;
    }

    /**
     * Operation indexTaskExecutionsByTaskWithHttpInfo
     *
     * Lists all task executions.
     *
     * @param  string $task_id Filter on task id (optional)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TaskExecutionCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTaskExecutionsByTaskWithHttpInfo($task_id = null, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {
        $request = $this->indexTaskExecutionsByTaskRequest($task_id, $limit, $offset, $sort_by, $id, $name, $workflow_type, $workflow_action, $source_type, $destination_type, $status, $log_time, $job_started, $job_finished, $to_process_size, $processed_size, $to_process_files, $processed_files, $finalized_files, $estimation_time, $bandwidth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TaskExecutionCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TaskExecutionCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TaskExecutionCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TaskExecutionCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTaskExecutionsByTaskAsync
     *
     * Lists all task executions.
     *
     * @param  string $task_id Filter on task id (optional)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTaskExecutionsByTaskAsync($task_id = null, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {
        return $this->indexTaskExecutionsByTaskAsyncWithHttpInfo($task_id, $limit, $offset, $sort_by, $id, $name, $workflow_type, $workflow_action, $source_type, $destination_type, $status, $log_time, $job_started, $job_finished, $to_process_size, $processed_size, $to_process_files, $processed_files, $finalized_files, $estimation_time, $bandwidth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTaskExecutionsByTaskAsyncWithHttpInfo
     *
     * Lists all task executions.
     *
     * @param  string $task_id Filter on task id (optional)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTaskExecutionsByTaskAsyncWithHttpInfo($task_id = null, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {
        $returnType = '\NodeumSDK\Client\Model\TaskExecutionCollection';
        $request = $this->indexTaskExecutionsByTaskRequest($task_id, $limit, $offset, $sort_by, $id, $name, $workflow_type, $workflow_action, $source_type, $destination_type, $status, $log_time, $job_started, $job_finished, $to_process_size, $processed_size, $to_process_files, $processed_files, $finalized_files, $estimation_time, $bandwidth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTaskExecutionsByTask'
     *
     * @param  string $task_id Filter on task id (optional)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $workflow_type Filter on task workflow type (optional)
     * @param  string $workflow_action Filter on task workflow action (optional)
     * @param  string $source_type Filter on task source type (optional)
     * @param  string $destination_type Filter on task destination type (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $log_time Filter on log time (optional)
     * @param  string $job_started Filter on job started (optional)
     * @param  string $job_finished Filter on job finished (optional)
     * @param  string $to_process_size Filter on to process size (optional)
     * @param  string $processed_size Filter on processed size (optional)
     * @param  string $to_process_files Filter on to process files (optional)
     * @param  string $processed_files Filter on processed files (optional)
     * @param  string $finalized_files Filter on finalized files (optional)
     * @param  string $estimation_time Filter on estimation time (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTaskExecutionsByTaskRequest($task_id = null, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $workflow_type = null, $workflow_action = null, $source_type = null, $destination_type = null, $status = null, $log_time = null, $job_started = null, $job_finished = null, $to_process_size = null, $processed_size = null, $to_process_files = null, $processed_files = null, $finalized_files = null, $estimation_time = null, $bandwidth = null)
    {

        $resourcePath = '/tasks/{task_id}/task_executions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($task_id)) {
            $task_id = ObjectSerializer::serializeCollection($task_id, '', true);
        }
        if ($task_id !== null) {
            $queryParams['task_id'] = $task_id;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($workflow_type)) {
            $workflow_type = ObjectSerializer::serializeCollection($workflow_type, '', true);
        }
        if ($workflow_type !== null) {
            $queryParams['workflow_type'] = $workflow_type;
        }
        // query params
        if (is_array($workflow_action)) {
            $workflow_action = ObjectSerializer::serializeCollection($workflow_action, '', true);
        }
        if ($workflow_action !== null) {
            $queryParams['workflow_action'] = $workflow_action;
        }
        // query params
        if (is_array($source_type)) {
            $source_type = ObjectSerializer::serializeCollection($source_type, '', true);
        }
        if ($source_type !== null) {
            $queryParams['source_type'] = $source_type;
        }
        // query params
        if (is_array($destination_type)) {
            $destination_type = ObjectSerializer::serializeCollection($destination_type, '', true);
        }
        if ($destination_type !== null) {
            $queryParams['destination_type'] = $destination_type;
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if (is_array($log_time)) {
            $log_time = ObjectSerializer::serializeCollection($log_time, '', true);
        }
        if ($log_time !== null) {
            $queryParams['log_time'] = $log_time;
        }
        // query params
        if (is_array($job_started)) {
            $job_started = ObjectSerializer::serializeCollection($job_started, '', true);
        }
        if ($job_started !== null) {
            $queryParams['job_started'] = $job_started;
        }
        // query params
        if (is_array($job_finished)) {
            $job_finished = ObjectSerializer::serializeCollection($job_finished, '', true);
        }
        if ($job_finished !== null) {
            $queryParams['job_finished'] = $job_finished;
        }
        // query params
        if (is_array($to_process_size)) {
            $to_process_size = ObjectSerializer::serializeCollection($to_process_size, '', true);
        }
        if ($to_process_size !== null) {
            $queryParams['to_process_size'] = $to_process_size;
        }
        // query params
        if (is_array($processed_size)) {
            $processed_size = ObjectSerializer::serializeCollection($processed_size, '', true);
        }
        if ($processed_size !== null) {
            $queryParams['processed_size'] = $processed_size;
        }
        // query params
        if (is_array($to_process_files)) {
            $to_process_files = ObjectSerializer::serializeCollection($to_process_files, '', true);
        }
        if ($to_process_files !== null) {
            $queryParams['to_process_files'] = $to_process_files;
        }
        // query params
        if (is_array($processed_files)) {
            $processed_files = ObjectSerializer::serializeCollection($processed_files, '', true);
        }
        if ($processed_files !== null) {
            $queryParams['processed_files'] = $processed_files;
        }
        // query params
        if (is_array($finalized_files)) {
            $finalized_files = ObjectSerializer::serializeCollection($finalized_files, '', true);
        }
        if ($finalized_files !== null) {
            $queryParams['finalized_files'] = $finalized_files;
        }
        // query params
        if (is_array($estimation_time)) {
            $estimation_time = ObjectSerializer::serializeCollection($estimation_time, '', true);
        }
        if ($estimation_time !== null) {
            $queryParams['estimation_time'] = $estimation_time;
        }
        // query params
        if (is_array($bandwidth)) {
            $bandwidth = ObjectSerializer::serializeCollection($bandwidth, '', true);
        }
        if ($bandwidth !== null) {
            $queryParams['bandwidth'] = $bandwidth;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTaskExecution
     *
     * Displays a specific task execution.
     *
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TaskExecution|\NodeumSDK\Client\Model\Error
     */
    public function showTaskExecution($task_execution_id)
    {
        list($response) = $this->showTaskExecutionWithHttpInfo($task_execution_id);
        return $response;
    }

    /**
     * Operation showTaskExecutionWithHttpInfo
     *
     * Displays a specific task execution.
     *
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TaskExecution|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTaskExecutionWithHttpInfo($task_execution_id)
    {
        $request = $this->showTaskExecutionRequest($task_execution_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TaskExecution' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TaskExecution', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TaskExecution';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TaskExecution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTaskExecutionAsync
     *
     * Displays a specific task execution.
     *
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTaskExecutionAsync($task_execution_id)
    {
        return $this->showTaskExecutionAsyncWithHttpInfo($task_execution_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTaskExecutionAsyncWithHttpInfo
     *
     * Displays a specific task execution.
     *
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTaskExecutionAsyncWithHttpInfo($task_execution_id)
    {
        $returnType = '\NodeumSDK\Client\Model\TaskExecution';
        $request = $this->showTaskExecutionRequest($task_execution_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTaskExecution'
     *
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTaskExecutionRequest($task_execution_id)
    {
        // verify the required parameter 'task_execution_id' is set
        if ($task_execution_id === null || (is_array($task_execution_id) && count($task_execution_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_execution_id when calling showTaskExecution'
            );
        }

        $resourcePath = '/task_executions/{task_execution_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($task_execution_id !== null) {
            $resourcePath = str_replace(
                '{' . 'task_execution_id' . '}',
                ObjectSerializer::toPathValue($task_execution_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTaskExecutionByTask
     *
     * Displays a specific task execution.
     *
     * @param  string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TaskExecution|\NodeumSDK\Client\Model\Error
     */
    public function showTaskExecutionByTask($task_id, $task_execution_id)
    {
        list($response) = $this->showTaskExecutionByTaskWithHttpInfo($task_id, $task_execution_id);
        return $response;
    }

    /**
     * Operation showTaskExecutionByTaskWithHttpInfo
     *
     * Displays a specific task execution.
     *
     * @param  string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TaskExecution|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTaskExecutionByTaskWithHttpInfo($task_id, $task_execution_id)
    {
        $request = $this->showTaskExecutionByTaskRequest($task_id, $task_execution_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TaskExecution' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TaskExecution', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TaskExecution';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TaskExecution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTaskExecutionByTaskAsync
     *
     * Displays a specific task execution.
     *
     * @param  string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTaskExecutionByTaskAsync($task_id, $task_execution_id)
    {
        return $this->showTaskExecutionByTaskAsyncWithHttpInfo($task_id, $task_execution_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTaskExecutionByTaskAsyncWithHttpInfo
     *
     * Displays a specific task execution.
     *
     * @param  string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTaskExecutionByTaskAsyncWithHttpInfo($task_id, $task_execution_id)
    {
        $returnType = '\NodeumSDK\Client\Model\TaskExecution';
        $request = $this->showTaskExecutionByTaskRequest($task_id, $task_execution_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTaskExecutionByTask'
     *
     * @param  string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param  string $task_execution_id Numeric ID of task execution. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTaskExecutionByTaskRequest($task_id, $task_execution_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling showTaskExecutionByTask'
            );
        }
        // verify the required parameter 'task_execution_id' is set
        if ($task_execution_id === null || (is_array($task_execution_id) && count($task_execution_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_execution_id when calling showTaskExecutionByTask'
            );
        }

        $resourcePath = '/tasks/{task_id}/task_executions/{task_execution_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'task_id' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($task_execution_id !== null) {
            $resourcePath = str_replace(
                '{' . 'task_execution_id' . '}',
                ObjectSerializer::toPathValue($task_execution_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
