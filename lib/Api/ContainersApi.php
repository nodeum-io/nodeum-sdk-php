<?php
/**
 * ContainersApi
 * PHP version 5
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NodeumSDK\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NodeumSDK\Client\ApiException;
use NodeumSDK\Client\Configuration;
use NodeumSDK\Client\HeaderSelector;
use NodeumSDK\Client\ObjectSerializer;

/**
 * ContainersApi Class Doc Comment
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContainersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createContainer
     *
     * Creates a new container.
     *
     * @param  \NodeumSDK\Client\Model\Container $container_body container_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\Container|\NodeumSDK\Client\Model\Error
     */
    public function createContainer($container_body)
    {
        list($response) = $this->createContainerWithHttpInfo($container_body);
        return $response;
    }

    /**
     * Operation createContainerWithHttpInfo
     *
     * Creates a new container.
     *
     * @param  \NodeumSDK\Client\Model\Container $container_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\Container|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContainerWithHttpInfo($container_body)
    {
        $request = $this->createContainerRequest($container_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\NodeumSDK\Client\Model\Container' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Container', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\Container';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Container',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContainerAsync
     *
     * Creates a new container.
     *
     * @param  \NodeumSDK\Client\Model\Container $container_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContainerAsync($container_body)
    {
        return $this->createContainerAsyncWithHttpInfo($container_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createContainerAsyncWithHttpInfo
     *
     * Creates a new container.
     *
     * @param  \NodeumSDK\Client\Model\Container $container_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContainerAsyncWithHttpInfo($container_body)
    {
        $returnType = '\NodeumSDK\Client\Model\Container';
        $request = $this->createContainerRequest($container_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createContainer'
     *
     * @param  \NodeumSDK\Client\Model\Container $container_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createContainerRequest($container_body)
    {
        // verify the required parameter 'container_body' is set
        if ($container_body === null || (is_array($container_body) && count($container_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_body when calling createContainer'
            );
        }

        $resourcePath = '/containers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($container_body)) {
            $_tempBody = $container_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createContainerPrivilege
     *
     * Creates a new privilege on the container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body container_privilege_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\ContainerPrivilege|\NodeumSDK\Client\Model\Error
     */
    public function createContainerPrivilege($container_id, $container_privilege_body)
    {
        list($response) = $this->createContainerPrivilegeWithHttpInfo($container_id, $container_privilege_body);
        return $response;
    }

    /**
     * Operation createContainerPrivilegeWithHttpInfo
     *
     * Creates a new privilege on the container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\ContainerPrivilege|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContainerPrivilegeWithHttpInfo($container_id, $container_privilege_body)
    {
        $request = $this->createContainerPrivilegeRequest($container_id, $container_privilege_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\NodeumSDK\Client\Model\ContainerPrivilege' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ContainerPrivilege', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\ContainerPrivilege';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ContainerPrivilege',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContainerPrivilegeAsync
     *
     * Creates a new privilege on the container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContainerPrivilegeAsync($container_id, $container_privilege_body)
    {
        return $this->createContainerPrivilegeAsyncWithHttpInfo($container_id, $container_privilege_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createContainerPrivilegeAsyncWithHttpInfo
     *
     * Creates a new privilege on the container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContainerPrivilegeAsyncWithHttpInfo($container_id, $container_privilege_body)
    {
        $returnType = '\NodeumSDK\Client\Model\ContainerPrivilege';
        $request = $this->createContainerPrivilegeRequest($container_id, $container_privilege_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createContainerPrivilege'
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createContainerPrivilegeRequest($container_id, $container_privilege_body)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling createContainerPrivilege'
            );
        }
        // verify the required parameter 'container_privilege_body' is set
        if ($container_privilege_body === null || (is_array($container_privilege_body) && count($container_privilege_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_privilege_body when calling createContainerPrivilege'
            );
        }

        $resourcePath = '/containers/{container_id}/container_privileges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_id' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($container_privilege_body)) {
            $_tempBody = $container_privilege_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyContainer
     *
     * Destroys a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyContainer($container_id)
    {
        $this->destroyContainerWithHttpInfo($container_id);
    }

    /**
     * Operation destroyContainerWithHttpInfo
     *
     * Destroys a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyContainerWithHttpInfo($container_id)
    {
        $request = $this->destroyContainerRequest($container_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyContainerAsync
     *
     * Destroys a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyContainerAsync($container_id)
    {
        return $this->destroyContainerAsyncWithHttpInfo($container_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyContainerAsyncWithHttpInfo
     *
     * Destroys a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyContainerAsyncWithHttpInfo($container_id)
    {
        $returnType = '';
        $request = $this->destroyContainerRequest($container_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyContainer'
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyContainerRequest($container_id)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling destroyContainer'
            );
        }

        $resourcePath = '/containers/{container_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_id' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyContainerPrivilege
     *
     * Destroys a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyContainerPrivilege($container_id, $container_privilege_id)
    {
        $this->destroyContainerPrivilegeWithHttpInfo($container_id, $container_privilege_id);
    }

    /**
     * Operation destroyContainerPrivilegeWithHttpInfo
     *
     * Destroys a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyContainerPrivilegeWithHttpInfo($container_id, $container_privilege_id)
    {
        $request = $this->destroyContainerPrivilegeRequest($container_id, $container_privilege_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyContainerPrivilegeAsync
     *
     * Destroys a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyContainerPrivilegeAsync($container_id, $container_privilege_id)
    {
        return $this->destroyContainerPrivilegeAsyncWithHttpInfo($container_id, $container_privilege_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyContainerPrivilegeAsyncWithHttpInfo
     *
     * Destroys a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyContainerPrivilegeAsyncWithHttpInfo($container_id, $container_privilege_id)
    {
        $returnType = '';
        $request = $this->destroyContainerPrivilegeRequest($container_id, $container_privilege_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyContainerPrivilege'
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyContainerPrivilegeRequest($container_id, $container_privilege_id)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling destroyContainerPrivilege'
            );
        }
        // verify the required parameter 'container_privilege_id' is set
        if ($container_privilege_id === null || (is_array($container_privilege_id) && count($container_privilege_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_privilege_id when calling destroyContainerPrivilege'
            );
        }

        $resourcePath = '/containers/{container_id}/container_privileges/{container_privilege_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_id' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }
        // path params
        if ($container_privilege_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_privilege_id' . '}',
                ObjectSerializer::toPathValue($container_privilege_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexContainerPrivileges
     *
     * Lists all privilege on the container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $privilege Filter on privilege (optional)
     * @param  string $type Filter on type (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\ContainerPrivilegeCollection
     */
    public function indexContainerPrivileges($container_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $privilege = null, $type = null)
    {
        list($response) = $this->indexContainerPrivilegesWithHttpInfo($container_id, $limit, $offset, $sort_by, $id, $name, $privilege, $type);
        return $response;
    }

    /**
     * Operation indexContainerPrivilegesWithHttpInfo
     *
     * Lists all privilege on the container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $privilege Filter on privilege (optional)
     * @param  string $type Filter on type (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\ContainerPrivilegeCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexContainerPrivilegesWithHttpInfo($container_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $privilege = null, $type = null)
    {
        $request = $this->indexContainerPrivilegesRequest($container_id, $limit, $offset, $sort_by, $id, $name, $privilege, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\ContainerPrivilegeCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ContainerPrivilegeCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\ContainerPrivilegeCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ContainerPrivilegeCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexContainerPrivilegesAsync
     *
     * Lists all privilege on the container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $privilege Filter on privilege (optional)
     * @param  string $type Filter on type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexContainerPrivilegesAsync($container_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $privilege = null, $type = null)
    {
        return $this->indexContainerPrivilegesAsyncWithHttpInfo($container_id, $limit, $offset, $sort_by, $id, $name, $privilege, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexContainerPrivilegesAsyncWithHttpInfo
     *
     * Lists all privilege on the container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $privilege Filter on privilege (optional)
     * @param  string $type Filter on type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexContainerPrivilegesAsyncWithHttpInfo($container_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $privilege = null, $type = null)
    {
        $returnType = '\NodeumSDK\Client\Model\ContainerPrivilegeCollection';
        $request = $this->indexContainerPrivilegesRequest($container_id, $limit, $offset, $sort_by, $id, $name, $privilege, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexContainerPrivileges'
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $privilege Filter on privilege (optional)
     * @param  string $type Filter on type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexContainerPrivilegesRequest($container_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $privilege = null, $type = null)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling indexContainerPrivileges'
            );
        }

        $resourcePath = '/containers/{container_id}/container_privileges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($privilege)) {
            $privilege = ObjectSerializer::serializeCollection($privilege, '', true);
        }
        if ($privilege !== null) {
            $queryParams['privilege'] = $privilege;
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }


        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_id' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexContainers
     *
     * Lists all containers.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $quota_total_size Filter on quota total size (optional)
     * @param  string $quota_on_cache Filter on quota on cache (optional)
     * @param  string $stat_total_files Filter on stat total files (optional)
     * @param  string $stat_total_size Filter on stat total size (optional)
     * @param  string $stat_size_on_cache Filter on stat size on cache (optional)
     * @param  string $guest_right Filter on guest right (optional)
     * @param  string $last_update Filter on last update (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\ContainerCollection
     */
    public function indexContainers($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $comment = null, $quota_total_size = null, $quota_on_cache = null, $stat_total_files = null, $stat_total_size = null, $stat_size_on_cache = null, $guest_right = null, $last_update = null)
    {
        list($response) = $this->indexContainersWithHttpInfo($limit, $offset, $sort_by, $id, $name, $comment, $quota_total_size, $quota_on_cache, $stat_total_files, $stat_total_size, $stat_size_on_cache, $guest_right, $last_update);
        return $response;
    }

    /**
     * Operation indexContainersWithHttpInfo
     *
     * Lists all containers.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $quota_total_size Filter on quota total size (optional)
     * @param  string $quota_on_cache Filter on quota on cache (optional)
     * @param  string $stat_total_files Filter on stat total files (optional)
     * @param  string $stat_total_size Filter on stat total size (optional)
     * @param  string $stat_size_on_cache Filter on stat size on cache (optional)
     * @param  string $guest_right Filter on guest right (optional)
     * @param  string $last_update Filter on last update (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\ContainerCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexContainersWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $comment = null, $quota_total_size = null, $quota_on_cache = null, $stat_total_files = null, $stat_total_size = null, $stat_size_on_cache = null, $guest_right = null, $last_update = null)
    {
        $request = $this->indexContainersRequest($limit, $offset, $sort_by, $id, $name, $comment, $quota_total_size, $quota_on_cache, $stat_total_files, $stat_total_size, $stat_size_on_cache, $guest_right, $last_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\ContainerCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ContainerCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\ContainerCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ContainerCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexContainersAsync
     *
     * Lists all containers.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $quota_total_size Filter on quota total size (optional)
     * @param  string $quota_on_cache Filter on quota on cache (optional)
     * @param  string $stat_total_files Filter on stat total files (optional)
     * @param  string $stat_total_size Filter on stat total size (optional)
     * @param  string $stat_size_on_cache Filter on stat size on cache (optional)
     * @param  string $guest_right Filter on guest right (optional)
     * @param  string $last_update Filter on last update (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexContainersAsync($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $comment = null, $quota_total_size = null, $quota_on_cache = null, $stat_total_files = null, $stat_total_size = null, $stat_size_on_cache = null, $guest_right = null, $last_update = null)
    {
        return $this->indexContainersAsyncWithHttpInfo($limit, $offset, $sort_by, $id, $name, $comment, $quota_total_size, $quota_on_cache, $stat_total_files, $stat_total_size, $stat_size_on_cache, $guest_right, $last_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexContainersAsyncWithHttpInfo
     *
     * Lists all containers.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $quota_total_size Filter on quota total size (optional)
     * @param  string $quota_on_cache Filter on quota on cache (optional)
     * @param  string $stat_total_files Filter on stat total files (optional)
     * @param  string $stat_total_size Filter on stat total size (optional)
     * @param  string $stat_size_on_cache Filter on stat size on cache (optional)
     * @param  string $guest_right Filter on guest right (optional)
     * @param  string $last_update Filter on last update (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexContainersAsyncWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $comment = null, $quota_total_size = null, $quota_on_cache = null, $stat_total_files = null, $stat_total_size = null, $stat_size_on_cache = null, $guest_right = null, $last_update = null)
    {
        $returnType = '\NodeumSDK\Client\Model\ContainerCollection';
        $request = $this->indexContainersRequest($limit, $offset, $sort_by, $id, $name, $comment, $quota_total_size, $quota_on_cache, $stat_total_files, $stat_total_size, $stat_size_on_cache, $guest_right, $last_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexContainers'
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $quota_total_size Filter on quota total size (optional)
     * @param  string $quota_on_cache Filter on quota on cache (optional)
     * @param  string $stat_total_files Filter on stat total files (optional)
     * @param  string $stat_total_size Filter on stat total size (optional)
     * @param  string $stat_size_on_cache Filter on stat size on cache (optional)
     * @param  string $guest_right Filter on guest right (optional)
     * @param  string $last_update Filter on last update (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexContainersRequest($limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $comment = null, $quota_total_size = null, $quota_on_cache = null, $stat_total_files = null, $stat_total_size = null, $stat_size_on_cache = null, $guest_right = null, $last_update = null)
    {

        $resourcePath = '/containers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($comment)) {
            $comment = ObjectSerializer::serializeCollection($comment, '', true);
        }
        if ($comment !== null) {
            $queryParams['comment'] = $comment;
        }
        // query params
        if (is_array($quota_total_size)) {
            $quota_total_size = ObjectSerializer::serializeCollection($quota_total_size, '', true);
        }
        if ($quota_total_size !== null) {
            $queryParams['quota_total_size'] = $quota_total_size;
        }
        // query params
        if (is_array($quota_on_cache)) {
            $quota_on_cache = ObjectSerializer::serializeCollection($quota_on_cache, '', true);
        }
        if ($quota_on_cache !== null) {
            $queryParams['quota_on_cache'] = $quota_on_cache;
        }
        // query params
        if (is_array($stat_total_files)) {
            $stat_total_files = ObjectSerializer::serializeCollection($stat_total_files, '', true);
        }
        if ($stat_total_files !== null) {
            $queryParams['stat_total_files'] = $stat_total_files;
        }
        // query params
        if (is_array($stat_total_size)) {
            $stat_total_size = ObjectSerializer::serializeCollection($stat_total_size, '', true);
        }
        if ($stat_total_size !== null) {
            $queryParams['stat_total_size'] = $stat_total_size;
        }
        // query params
        if (is_array($stat_size_on_cache)) {
            $stat_size_on_cache = ObjectSerializer::serializeCollection($stat_size_on_cache, '', true);
        }
        if ($stat_size_on_cache !== null) {
            $queryParams['stat_size_on_cache'] = $stat_size_on_cache;
        }
        // query params
        if (is_array($guest_right)) {
            $guest_right = ObjectSerializer::serializeCollection($guest_right, '', true);
        }
        if ($guest_right !== null) {
            $queryParams['guest_right'] = $guest_right;
        }
        // query params
        if (is_array($last_update)) {
            $last_update = ObjectSerializer::serializeCollection($last_update, '', true);
        }
        if ($last_update !== null) {
            $queryParams['last_update'] = $last_update;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showContainer
     *
     * Displays a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\Container
     */
    public function showContainer($container_id)
    {
        list($response) = $this->showContainerWithHttpInfo($container_id);
        return $response;
    }

    /**
     * Operation showContainerWithHttpInfo
     *
     * Displays a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\Container, HTTP status code, HTTP response headers (array of strings)
     */
    public function showContainerWithHttpInfo($container_id)
    {
        $request = $this->showContainerRequest($container_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\Container' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Container', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\Container';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Container',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showContainerAsync
     *
     * Displays a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showContainerAsync($container_id)
    {
        return $this->showContainerAsyncWithHttpInfo($container_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showContainerAsyncWithHttpInfo
     *
     * Displays a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showContainerAsyncWithHttpInfo($container_id)
    {
        $returnType = '\NodeumSDK\Client\Model\Container';
        $request = $this->showContainerRequest($container_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showContainer'
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showContainerRequest($container_id)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling showContainer'
            );
        }

        $resourcePath = '/containers/{container_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_id' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showContainerPrivilege
     *
     * Displays a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\ContainerPrivilege
     */
    public function showContainerPrivilege($container_id, $container_privilege_id)
    {
        list($response) = $this->showContainerPrivilegeWithHttpInfo($container_id, $container_privilege_id);
        return $response;
    }

    /**
     * Operation showContainerPrivilegeWithHttpInfo
     *
     * Displays a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\ContainerPrivilege, HTTP status code, HTTP response headers (array of strings)
     */
    public function showContainerPrivilegeWithHttpInfo($container_id, $container_privilege_id)
    {
        $request = $this->showContainerPrivilegeRequest($container_id, $container_privilege_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\ContainerPrivilege' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ContainerPrivilege', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\ContainerPrivilege';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ContainerPrivilege',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showContainerPrivilegeAsync
     *
     * Displays a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showContainerPrivilegeAsync($container_id, $container_privilege_id)
    {
        return $this->showContainerPrivilegeAsyncWithHttpInfo($container_id, $container_privilege_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showContainerPrivilegeAsyncWithHttpInfo
     *
     * Displays a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showContainerPrivilegeAsyncWithHttpInfo($container_id, $container_privilege_id)
    {
        $returnType = '\NodeumSDK\Client\Model\ContainerPrivilege';
        $request = $this->showContainerPrivilegeRequest($container_id, $container_privilege_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showContainerPrivilege'
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showContainerPrivilegeRequest($container_id, $container_privilege_id)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling showContainerPrivilege'
            );
        }
        // verify the required parameter 'container_privilege_id' is set
        if ($container_privilege_id === null || (is_array($container_privilege_id) && count($container_privilege_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_privilege_id when calling showContainerPrivilege'
            );
        }

        $resourcePath = '/containers/{container_id}/container_privileges/{container_privilege_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_id' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }
        // path params
        if ($container_privilege_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_privilege_id' . '}',
                ObjectSerializer::toPathValue($container_privilege_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContainer
     *
     * Updates a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\Container $container_body container_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\Container|\NodeumSDK\Client\Model\Error
     */
    public function updateContainer($container_id, $container_body)
    {
        list($response) = $this->updateContainerWithHttpInfo($container_id, $container_body);
        return $response;
    }

    /**
     * Operation updateContainerWithHttpInfo
     *
     * Updates a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\Container $container_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\Container|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContainerWithHttpInfo($container_id, $container_body)
    {
        $request = $this->updateContainerRequest($container_id, $container_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\Container' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Container', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\Container';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Container',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContainerAsync
     *
     * Updates a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\Container $container_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContainerAsync($container_id, $container_body)
    {
        return $this->updateContainerAsyncWithHttpInfo($container_id, $container_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateContainerAsyncWithHttpInfo
     *
     * Updates a specific container.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\Container $container_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContainerAsyncWithHttpInfo($container_id, $container_body)
    {
        $returnType = '\NodeumSDK\Client\Model\Container';
        $request = $this->updateContainerRequest($container_id, $container_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateContainer'
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  \NodeumSDK\Client\Model\Container $container_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContainerRequest($container_id, $container_body)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling updateContainer'
            );
        }
        // verify the required parameter 'container_body' is set
        if ($container_body === null || (is_array($container_body) && count($container_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_body when calling updateContainer'
            );
        }

        $resourcePath = '/containers/{container_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_id' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($container_body)) {
            $_tempBody = $container_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContainerPrivilege
     *
     * Updates a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body container_privilege_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\ContainerPrivilege|\NodeumSDK\Client\Model\Error
     */
    public function updateContainerPrivilege($container_id, $container_privilege_id, $container_privilege_body)
    {
        list($response) = $this->updateContainerPrivilegeWithHttpInfo($container_id, $container_privilege_id, $container_privilege_body);
        return $response;
    }

    /**
     * Operation updateContainerPrivilegeWithHttpInfo
     *
     * Updates a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\ContainerPrivilege|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContainerPrivilegeWithHttpInfo($container_id, $container_privilege_id, $container_privilege_body)
    {
        $request = $this->updateContainerPrivilegeRequest($container_id, $container_privilege_id, $container_privilege_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\ContainerPrivilege' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ContainerPrivilege', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\ContainerPrivilege';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ContainerPrivilege',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContainerPrivilegeAsync
     *
     * Updates a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContainerPrivilegeAsync($container_id, $container_privilege_id, $container_privilege_body)
    {
        return $this->updateContainerPrivilegeAsyncWithHttpInfo($container_id, $container_privilege_id, $container_privilege_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateContainerPrivilegeAsyncWithHttpInfo
     *
     * Updates a specific privilege.
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContainerPrivilegeAsyncWithHttpInfo($container_id, $container_privilege_id, $container_privilege_body)
    {
        $returnType = '\NodeumSDK\Client\Model\ContainerPrivilege';
        $request = $this->updateContainerPrivilegeRequest($container_id, $container_privilege_id, $container_privilege_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateContainerPrivilege'
     *
     * @param  string $container_id Numeric ID or name of container. (required)
     * @param  int $container_privilege_id Numeric ID of container privilege. (required)
     * @param  \NodeumSDK\Client\Model\ContainerPrivilege $container_privilege_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContainerPrivilegeRequest($container_id, $container_privilege_id, $container_privilege_body)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling updateContainerPrivilege'
            );
        }
        // verify the required parameter 'container_privilege_id' is set
        if ($container_privilege_id === null || (is_array($container_privilege_id) && count($container_privilege_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_privilege_id when calling updateContainerPrivilege'
            );
        }
        // verify the required parameter 'container_privilege_body' is set
        if ($container_privilege_body === null || (is_array($container_privilege_body) && count($container_privilege_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_privilege_body when calling updateContainerPrivilege'
            );
        }

        $resourcePath = '/containers/{container_id}/container_privileges/{container_privilege_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_id' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }
        // path params
        if ($container_privilege_id !== null) {
            $resourcePath = str_replace(
                '{' . 'container_privilege_id' . '}',
                ObjectSerializer::toPathValue($container_privilege_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($container_privilege_body)) {
            $_tempBody = $container_privilege_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
