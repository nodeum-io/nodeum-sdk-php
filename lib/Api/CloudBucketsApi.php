<?php
/**
 * CloudBucketsApi
 * PHP version 5
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NodeumSDK\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NodeumSDK\Client\ApiException;
use NodeumSDK\Client\Configuration;
use NodeumSDK\Client\HeaderSelector;
use NodeumSDK\Client\ObjectSerializer;

/**
 * CloudBucketsApi Class Doc Comment
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CloudBucketsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation indexCloudBuckets
     *
     * Lists all cloud buckets.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucketCollection
     */
    public function indexCloudBuckets($limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        list($response) = $this->indexCloudBucketsWithHttpInfo($limit, $offset, $sort_by, $id, $cloud_connector_id, $pool_id, $name, $location, $price);
        return $response;
    }

    /**
     * Operation indexCloudBucketsWithHttpInfo
     *
     * Lists all cloud buckets.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucketCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexCloudBucketsWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        $request = $this->indexCloudBucketsRequest($limit, $offset, $sort_by, $id, $cloud_connector_id, $pool_id, $name, $location, $price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucketCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucketCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucketCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucketCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexCloudBucketsAsync
     *
     * Lists all cloud buckets.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexCloudBucketsAsync($limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        return $this->indexCloudBucketsAsyncWithHttpInfo($limit, $offset, $sort_by, $id, $cloud_connector_id, $pool_id, $name, $location, $price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexCloudBucketsAsyncWithHttpInfo
     *
     * Lists all cloud buckets.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexCloudBucketsAsyncWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucketCollection';
        $request = $this->indexCloudBucketsRequest($limit, $offset, $sort_by, $id, $cloud_connector_id, $pool_id, $name, $location, $price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexCloudBuckets'
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexCloudBucketsRequest($limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {

        $resourcePath = '/cloud_buckets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($cloud_connector_id)) {
            $cloud_connector_id = ObjectSerializer::serializeCollection($cloud_connector_id, '', true);
        }
        if ($cloud_connector_id !== null) {
            $queryParams['cloud_connector_id'] = $cloud_connector_id;
        }
        // query params
        if (is_array($pool_id)) {
            $pool_id = ObjectSerializer::serializeCollection($pool_id, '', true);
        }
        if ($pool_id !== null) {
            $queryParams['pool_id'] = $pool_id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($location)) {
            $location = ObjectSerializer::serializeCollection($location, '', true);
        }
        if ($location !== null) {
            $queryParams['location'] = $location;
        }
        // query params
        if (is_array($price)) {
            $price = ObjectSerializer::serializeCollection($price, '', true);
        }
        if ($price !== null) {
            $queryParams['price'] = $price;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexCloudBucketsByCloudConnector
     *
     * Lists all cloud buckets.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucketCollection
     */
    public function indexCloudBucketsByCloudConnector($cloud_connector_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        list($response) = $this->indexCloudBucketsByCloudConnectorWithHttpInfo($cloud_connector_id, $limit, $offset, $sort_by, $id, $pool_id, $name, $location, $price);
        return $response;
    }

    /**
     * Operation indexCloudBucketsByCloudConnectorWithHttpInfo
     *
     * Lists all cloud buckets.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucketCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexCloudBucketsByCloudConnectorWithHttpInfo($cloud_connector_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        $request = $this->indexCloudBucketsByCloudConnectorRequest($cloud_connector_id, $limit, $offset, $sort_by, $id, $pool_id, $name, $location, $price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucketCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucketCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucketCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucketCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexCloudBucketsByCloudConnectorAsync
     *
     * Lists all cloud buckets.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexCloudBucketsByCloudConnectorAsync($cloud_connector_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        return $this->indexCloudBucketsByCloudConnectorAsyncWithHttpInfo($cloud_connector_id, $limit, $offset, $sort_by, $id, $pool_id, $name, $location, $price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexCloudBucketsByCloudConnectorAsyncWithHttpInfo
     *
     * Lists all cloud buckets.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexCloudBucketsByCloudConnectorAsyncWithHttpInfo($cloud_connector_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucketCollection';
        $request = $this->indexCloudBucketsByCloudConnectorRequest($cloud_connector_id, $limit, $offset, $sort_by, $id, $pool_id, $name, $location, $price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexCloudBucketsByCloudConnector'
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexCloudBucketsByCloudConnectorRequest($cloud_connector_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $name = null, $location = null, $price = null)
    {
        // verify the required parameter 'cloud_connector_id' is set
        if ($cloud_connector_id === null || (is_array($cloud_connector_id) && count($cloud_connector_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_connector_id when calling indexCloudBucketsByCloudConnector'
            );
        }

        $resourcePath = '/cloud_connectors/{cloud_connector_id}/cloud_buckets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($pool_id)) {
            $pool_id = ObjectSerializer::serializeCollection($pool_id, '', true);
        }
        if ($pool_id !== null) {
            $queryParams['pool_id'] = $pool_id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($location)) {
            $location = ObjectSerializer::serializeCollection($location, '', true);
        }
        if ($location !== null) {
            $queryParams['location'] = $location;
        }
        // query params
        if (is_array($price)) {
            $price = ObjectSerializer::serializeCollection($price, '', true);
        }
        if ($price !== null) {
            $queryParams['price'] = $price;
        }


        // path params
        if ($cloud_connector_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_connector_id' . '}',
                ObjectSerializer::toPathValue($cloud_connector_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexCloudBucketsByPool
     *
     * Lists all cloud buckets from pool.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucketCollection
     */
    public function indexCloudBucketsByPool($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $name = null, $location = null, $price = null)
    {
        list($response) = $this->indexCloudBucketsByPoolWithHttpInfo($pool_id, $limit, $offset, $sort_by, $id, $cloud_connector_id, $name, $location, $price);
        return $response;
    }

    /**
     * Operation indexCloudBucketsByPoolWithHttpInfo
     *
     * Lists all cloud buckets from pool.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucketCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexCloudBucketsByPoolWithHttpInfo($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $name = null, $location = null, $price = null)
    {
        $request = $this->indexCloudBucketsByPoolRequest($pool_id, $limit, $offset, $sort_by, $id, $cloud_connector_id, $name, $location, $price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucketCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucketCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucketCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucketCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexCloudBucketsByPoolAsync
     *
     * Lists all cloud buckets from pool.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexCloudBucketsByPoolAsync($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $name = null, $location = null, $price = null)
    {
        return $this->indexCloudBucketsByPoolAsyncWithHttpInfo($pool_id, $limit, $offset, $sort_by, $id, $cloud_connector_id, $name, $location, $price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexCloudBucketsByPoolAsyncWithHttpInfo
     *
     * Lists all cloud buckets from pool.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexCloudBucketsByPoolAsyncWithHttpInfo($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $name = null, $location = null, $price = null)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucketCollection';
        $request = $this->indexCloudBucketsByPoolRequest($pool_id, $limit, $offset, $sort_by, $id, $cloud_connector_id, $name, $location, $price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexCloudBucketsByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $cloud_connector_id Filter on cloud connector id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $price Filter on price (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexCloudBucketsByPoolRequest($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $cloud_connector_id = null, $name = null, $location = null, $price = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling indexCloudBucketsByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/cloud_buckets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($cloud_connector_id)) {
            $cloud_connector_id = ObjectSerializer::serializeCollection($cloud_connector_id, '', true);
        }
        if ($cloud_connector_id !== null) {
            $queryParams['cloud_connector_id'] = $cloud_connector_id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($location)) {
            $location = ObjectSerializer::serializeCollection($location, '', true);
        }
        if ($location !== null) {
            $queryParams['location'] = $location;
        }
        // query params
        if (is_array($price)) {
            $price = ObjectSerializer::serializeCollection($price, '', true);
        }
        if ($price !== null) {
            $queryParams['price'] = $price;
        }


        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusCloudBucket
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusCloudBucket($cloud_bucket_id)
    {
        list($response) = $this->mountStatusCloudBucketWithHttpInfo($cloud_bucket_id);
        return $response;
    }

    /**
     * Operation mountStatusCloudBucketWithHttpInfo
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusCloudBucketWithHttpInfo($cloud_bucket_id)
    {
        $request = $this->mountStatusCloudBucketRequest($cloud_bucket_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusCloudBucketAsync
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusCloudBucketAsync($cloud_bucket_id)
    {
        return $this->mountStatusCloudBucketAsyncWithHttpInfo($cloud_bucket_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusCloudBucketAsyncWithHttpInfo
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusCloudBucketAsyncWithHttpInfo($cloud_bucket_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusCloudBucketRequest($cloud_bucket_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusCloudBucket'
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusCloudBucketRequest($cloud_bucket_id)
    {
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling mountStatusCloudBucket'
            );
        }

        $resourcePath = '/cloud_buckets/{cloud_bucket_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusCloudBucketByCloudConnector
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusCloudBucketByCloudConnector($cloud_connector_id, $cloud_bucket_id)
    {
        list($response) = $this->mountStatusCloudBucketByCloudConnectorWithHttpInfo($cloud_connector_id, $cloud_bucket_id);
        return $response;
    }

    /**
     * Operation mountStatusCloudBucketByCloudConnectorWithHttpInfo
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusCloudBucketByCloudConnectorWithHttpInfo($cloud_connector_id, $cloud_bucket_id)
    {
        $request = $this->mountStatusCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusCloudBucketByCloudConnectorAsync
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusCloudBucketByCloudConnectorAsync($cloud_connector_id, $cloud_bucket_id)
    {
        return $this->mountStatusCloudBucketByCloudConnectorAsyncWithHttpInfo($cloud_connector_id, $cloud_bucket_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusCloudBucketByCloudConnectorAsyncWithHttpInfo
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusCloudBucketByCloudConnectorAsyncWithHttpInfo($cloud_connector_id, $cloud_bucket_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusCloudBucketByCloudConnector'
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id)
    {
        // verify the required parameter 'cloud_connector_id' is set
        if ($cloud_connector_id === null || (is_array($cloud_connector_id) && count($cloud_connector_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_connector_id when calling mountStatusCloudBucketByCloudConnector'
            );
        }
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling mountStatusCloudBucketByCloudConnector'
            );
        }

        $resourcePath = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_connector_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_connector_id' . '}',
                ObjectSerializer::toPathValue($cloud_connector_id),
                $resourcePath
            );
        }
        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusCloudBucketByPool
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusCloudBucketByPool($pool_id, $cloud_bucket_id)
    {
        list($response) = $this->mountStatusCloudBucketByPoolWithHttpInfo($pool_id, $cloud_bucket_id);
        return $response;
    }

    /**
     * Operation mountStatusCloudBucketByPoolWithHttpInfo
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusCloudBucketByPoolWithHttpInfo($pool_id, $cloud_bucket_id)
    {
        $request = $this->mountStatusCloudBucketByPoolRequest($pool_id, $cloud_bucket_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusCloudBucketByPoolAsync
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusCloudBucketByPoolAsync($pool_id, $cloud_bucket_id)
    {
        return $this->mountStatusCloudBucketByPoolAsyncWithHttpInfo($pool_id, $cloud_bucket_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusCloudBucketByPoolAsyncWithHttpInfo
     *
     * Get mount status of Cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusCloudBucketByPoolAsyncWithHttpInfo($pool_id, $cloud_bucket_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusCloudBucketByPoolRequest($pool_id, $cloud_bucket_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusCloudBucketByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusCloudBucketByPoolRequest($pool_id, $cloud_bucket_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling mountStatusCloudBucketByPool'
            );
        }
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling mountStatusCloudBucketByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showCloudBucket
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error
     */
    public function showCloudBucket($cloud_bucket_id)
    {
        list($response) = $this->showCloudBucketWithHttpInfo($cloud_bucket_id);
        return $response;
    }

    /**
     * Operation showCloudBucketWithHttpInfo
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showCloudBucketWithHttpInfo($cloud_bucket_id)
    {
        $request = $this->showCloudBucketRequest($cloud_bucket_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showCloudBucketAsync
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showCloudBucketAsync($cloud_bucket_id)
    {
        return $this->showCloudBucketAsyncWithHttpInfo($cloud_bucket_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showCloudBucketAsyncWithHttpInfo
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showCloudBucketAsyncWithHttpInfo($cloud_bucket_id)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucket';
        $request = $this->showCloudBucketRequest($cloud_bucket_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showCloudBucket'
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showCloudBucketRequest($cloud_bucket_id)
    {
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling showCloudBucket'
            );
        }

        $resourcePath = '/cloud_buckets/{cloud_bucket_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showCloudBucketByCloudConnector
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error
     */
    public function showCloudBucketByCloudConnector($cloud_connector_id, $cloud_bucket_id)
    {
        list($response) = $this->showCloudBucketByCloudConnectorWithHttpInfo($cloud_connector_id, $cloud_bucket_id);
        return $response;
    }

    /**
     * Operation showCloudBucketByCloudConnectorWithHttpInfo
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showCloudBucketByCloudConnectorWithHttpInfo($cloud_connector_id, $cloud_bucket_id)
    {
        $request = $this->showCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showCloudBucketByCloudConnectorAsync
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showCloudBucketByCloudConnectorAsync($cloud_connector_id, $cloud_bucket_id)
    {
        return $this->showCloudBucketByCloudConnectorAsyncWithHttpInfo($cloud_connector_id, $cloud_bucket_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showCloudBucketByCloudConnectorAsyncWithHttpInfo
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showCloudBucketByCloudConnectorAsyncWithHttpInfo($cloud_connector_id, $cloud_bucket_id)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucket';
        $request = $this->showCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showCloudBucketByCloudConnector'
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id)
    {
        // verify the required parameter 'cloud_connector_id' is set
        if ($cloud_connector_id === null || (is_array($cloud_connector_id) && count($cloud_connector_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_connector_id when calling showCloudBucketByCloudConnector'
            );
        }
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling showCloudBucketByCloudConnector'
            );
        }

        $resourcePath = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_connector_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_connector_id' . '}',
                ObjectSerializer::toPathValue($cloud_connector_id),
                $resourcePath
            );
        }
        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showCloudBucketByPool
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error
     */
    public function showCloudBucketByPool($pool_id, $cloud_bucket_id)
    {
        list($response) = $this->showCloudBucketByPoolWithHttpInfo($pool_id, $cloud_bucket_id);
        return $response;
    }

    /**
     * Operation showCloudBucketByPoolWithHttpInfo
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showCloudBucketByPoolWithHttpInfo($pool_id, $cloud_bucket_id)
    {
        $request = $this->showCloudBucketByPoolRequest($pool_id, $cloud_bucket_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showCloudBucketByPoolAsync
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showCloudBucketByPoolAsync($pool_id, $cloud_bucket_id)
    {
        return $this->showCloudBucketByPoolAsyncWithHttpInfo($pool_id, $cloud_bucket_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showCloudBucketByPoolAsyncWithHttpInfo
     *
     * Displays a specific cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showCloudBucketByPoolAsyncWithHttpInfo($pool_id, $cloud_bucket_id)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucket';
        $request = $this->showCloudBucketByPoolRequest($pool_id, $cloud_bucket_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showCloudBucketByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showCloudBucketByPoolRequest($pool_id, $cloud_bucket_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling showCloudBucketByPool'
            );
        }
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling showCloudBucketByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncCloudBuckets
     *
     * Synchronize internal cloud buckets with their remote equivalent.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\ActiveJobStatus
     */
    public function syncCloudBuckets($cloud_connector_id)
    {
        list($response) = $this->syncCloudBucketsWithHttpInfo($cloud_connector_id);
        return $response;
    }

    /**
     * Operation syncCloudBucketsWithHttpInfo
     *
     * Synchronize internal cloud buckets with their remote equivalent.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\ActiveJobStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncCloudBucketsWithHttpInfo($cloud_connector_id)
    {
        $request = $this->syncCloudBucketsRequest($cloud_connector_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\NodeumSDK\Client\Model\ActiveJobStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ActiveJobStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\ActiveJobStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ActiveJobStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncCloudBucketsAsync
     *
     * Synchronize internal cloud buckets with their remote equivalent.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncCloudBucketsAsync($cloud_connector_id)
    {
        return $this->syncCloudBucketsAsyncWithHttpInfo($cloud_connector_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncCloudBucketsAsyncWithHttpInfo
     *
     * Synchronize internal cloud buckets with their remote equivalent.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncCloudBucketsAsyncWithHttpInfo($cloud_connector_id)
    {
        $returnType = '\NodeumSDK\Client\Model\ActiveJobStatus';
        $request = $this->syncCloudBucketsRequest($cloud_connector_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncCloudBuckets'
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function syncCloudBucketsRequest($cloud_connector_id)
    {
        // verify the required parameter 'cloud_connector_id' is set
        if ($cloud_connector_id === null || (is_array($cloud_connector_id) && count($cloud_connector_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_connector_id when calling syncCloudBuckets'
            );
        }

        $resourcePath = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_connector_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_connector_id' . '}',
                ObjectSerializer::toPathValue($cloud_connector_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'queued', 'working', 'failed']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'queued', 'working', 'failed'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncResultCloudBuckets
     *
     * Check result of cloud connector sync job.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucketSimpleCollection|\NodeumSDK\Client\Model\ActiveJobStatus
     */
    public function syncResultCloudBuckets($cloud_connector_id, $job_id)
    {
        list($response) = $this->syncResultCloudBucketsWithHttpInfo($cloud_connector_id, $job_id);
        return $response;
    }

    /**
     * Operation syncResultCloudBucketsWithHttpInfo
     *
     * Check result of cloud connector sync job.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucketSimpleCollection|\NodeumSDK\Client\Model\ActiveJobStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncResultCloudBucketsWithHttpInfo($cloud_connector_id, $job_id)
    {
        $request = $this->syncResultCloudBucketsRequest($cloud_connector_id, $job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucketSimpleCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucketSimpleCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\NodeumSDK\Client\Model\ActiveJobStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ActiveJobStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucketSimpleCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucketSimpleCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ActiveJobStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncResultCloudBucketsAsync
     *
     * Check result of cloud connector sync job.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncResultCloudBucketsAsync($cloud_connector_id, $job_id)
    {
        return $this->syncResultCloudBucketsAsyncWithHttpInfo($cloud_connector_id, $job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncResultCloudBucketsAsyncWithHttpInfo
     *
     * Check result of cloud connector sync job.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncResultCloudBucketsAsyncWithHttpInfo($cloud_connector_id, $job_id)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucketSimpleCollection';
        $request = $this->syncResultCloudBucketsRequest($cloud_connector_id, $job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncResultCloudBuckets'
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function syncResultCloudBucketsRequest($cloud_connector_id, $job_id)
    {
        // verify the required parameter 'cloud_connector_id' is set
        if ($cloud_connector_id === null || (is_array($cloud_connector_id) && count($cloud_connector_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_connector_id when calling syncResultCloudBuckets'
            );
        }
        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling syncResultCloudBuckets'
            );
        }

        $resourcePath = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($job_id)) {
            $job_id = ObjectSerializer::serializeCollection($job_id, '', true);
        }
        if ($job_id !== null) {
            $queryParams['job_id'] = $job_id;
        }


        // path params
        if ($cloud_connector_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_connector_id' . '}',
                ObjectSerializer::toPathValue($cloud_connector_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'queued', 'working', 'failed', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'queued', 'working', 'failed', ],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCloudBucket
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body cloud_bucket_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error
     */
    public function updateCloudBucket($cloud_bucket_id, $cloud_bucket_body)
    {
        list($response) = $this->updateCloudBucketWithHttpInfo($cloud_bucket_id, $cloud_bucket_body);
        return $response;
    }

    /**
     * Operation updateCloudBucketWithHttpInfo
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCloudBucketWithHttpInfo($cloud_bucket_id, $cloud_bucket_body)
    {
        $request = $this->updateCloudBucketRequest($cloud_bucket_id, $cloud_bucket_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCloudBucketAsync
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudBucketAsync($cloud_bucket_id, $cloud_bucket_body)
    {
        return $this->updateCloudBucketAsyncWithHttpInfo($cloud_bucket_id, $cloud_bucket_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCloudBucketAsyncWithHttpInfo
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudBucketAsyncWithHttpInfo($cloud_bucket_id, $cloud_bucket_body)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucket';
        $request = $this->updateCloudBucketRequest($cloud_bucket_id, $cloud_bucket_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCloudBucket'
     *
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCloudBucketRequest($cloud_bucket_id, $cloud_bucket_body)
    {
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling updateCloudBucket'
            );
        }
        // verify the required parameter 'cloud_bucket_body' is set
        if ($cloud_bucket_body === null || (is_array($cloud_bucket_body) && count($cloud_bucket_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_body when calling updateCloudBucket'
            );
        }

        $resourcePath = '/cloud_buckets/{cloud_bucket_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cloud_bucket_body)) {
            $_tempBody = $cloud_bucket_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCloudBucketByCloudConnector
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body cloud_bucket_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error
     */
    public function updateCloudBucketByCloudConnector($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        list($response) = $this->updateCloudBucketByCloudConnectorWithHttpInfo($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body);
        return $response;
    }

    /**
     * Operation updateCloudBucketByCloudConnectorWithHttpInfo
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCloudBucketByCloudConnectorWithHttpInfo($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        $request = $this->updateCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCloudBucketByCloudConnectorAsync
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudBucketByCloudConnectorAsync($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        return $this->updateCloudBucketByCloudConnectorAsyncWithHttpInfo($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCloudBucketByCloudConnectorAsyncWithHttpInfo
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudBucketByCloudConnectorAsyncWithHttpInfo($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucket';
        $request = $this->updateCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCloudBucketByCloudConnector'
     *
     * @param  string $cloud_connector_id Numeric ID or name of cloud connector. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCloudBucketByCloudConnectorRequest($cloud_connector_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        // verify the required parameter 'cloud_connector_id' is set
        if ($cloud_connector_id === null || (is_array($cloud_connector_id) && count($cloud_connector_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_connector_id when calling updateCloudBucketByCloudConnector'
            );
        }
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling updateCloudBucketByCloudConnector'
            );
        }
        // verify the required parameter 'cloud_bucket_body' is set
        if ($cloud_bucket_body === null || (is_array($cloud_bucket_body) && count($cloud_bucket_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_body when calling updateCloudBucketByCloudConnector'
            );
        }

        $resourcePath = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_connector_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_connector_id' . '}',
                ObjectSerializer::toPathValue($cloud_connector_id),
                $resourcePath
            );
        }
        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cloud_bucket_body)) {
            $_tempBody = $cloud_bucket_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCloudBucketByPool
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body cloud_bucket_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error
     */
    public function updateCloudBucketByPool($pool_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        list($response) = $this->updateCloudBucketByPoolWithHttpInfo($pool_id, $cloud_bucket_id, $cloud_bucket_body);
        return $response;
    }

    /**
     * Operation updateCloudBucketByPoolWithHttpInfo
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\CloudBucket|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCloudBucketByPoolWithHttpInfo($pool_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        $request = $this->updateCloudBucketByPoolRequest($pool_id, $cloud_bucket_id, $cloud_bucket_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\CloudBucket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\CloudBucket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\CloudBucket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\CloudBucket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCloudBucketByPoolAsync
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudBucketByPoolAsync($pool_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        return $this->updateCloudBucketByPoolAsyncWithHttpInfo($pool_id, $cloud_bucket_id, $cloud_bucket_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCloudBucketByPoolAsyncWithHttpInfo
     *
     * Updates a specific cloud bucket.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudBucketByPoolAsyncWithHttpInfo($pool_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        $returnType = '\NodeumSDK\Client\Model\CloudBucket';
        $request = $this->updateCloudBucketByPoolRequest($pool_id, $cloud_bucket_id, $cloud_bucket_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCloudBucketByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
     * @param  \NodeumSDK\Client\Model\CloudBucket $cloud_bucket_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCloudBucketByPoolRequest($pool_id, $cloud_bucket_id, $cloud_bucket_body)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling updateCloudBucketByPool'
            );
        }
        // verify the required parameter 'cloud_bucket_id' is set
        if ($cloud_bucket_id === null || (is_array($cloud_bucket_id) && count($cloud_bucket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_id when calling updateCloudBucketByPool'
            );
        }
        // verify the required parameter 'cloud_bucket_body' is set
        if ($cloud_bucket_body === null || (is_array($cloud_bucket_body) && count($cloud_bucket_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_bucket_body when calling updateCloudBucketByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($cloud_bucket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_bucket_id' . '}',
                ObjectSerializer::toPathValue($cloud_bucket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cloud_bucket_body)) {
            $_tempBody = $cloud_bucket_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
