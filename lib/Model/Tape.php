<?php
/**
 * Tape
 *
 * PHP version 5
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NodeumSDK\Client\Model;

use \ArrayAccess;
use \NodeumSDK\Client\ObjectSerializer;

/**
 * Tape Class Doc Comment
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Tape implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tape';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'tape_library_id' => 'int',
        'pool_id' => 'int',
        'barcode' => 'string',
        'location' => 'string',
        'type' => 'string',
        'locked' => 'bool',
        'scratch' => 'bool',
        'cleaning' => 'bool',
        'write_protect' => 'bool',
        'mounted' => 'bool',
        'ejected' => 'bool',
        'known' => 'bool',
        'mount_count' => 'int',
        'date_in' => 'string',
        'date_move' => 'string',
        'free' => 'int',
        'max' => 'int',
        'last_size_update' => 'string',
        'last_maintenance' => 'string',
        'last_repack' => 'string',
        'repack_status' => 'bool',
        'hash' => 'string',
        'force_import_type' => 'bool',
        'need_to_check' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'tape_library_id' => null,
        'pool_id' => null,
        'barcode' => null,
        'location' => null,
        'type' => null,
        'locked' => null,
        'scratch' => null,
        'cleaning' => null,
        'write_protect' => null,
        'mounted' => null,
        'ejected' => null,
        'known' => null,
        'mount_count' => null,
        'date_in' => null,
        'date_move' => null,
        'free' => null,
        'max' => null,
        'last_size_update' => null,
        'last_maintenance' => null,
        'last_repack' => null,
        'repack_status' => null,
        'hash' => null,
        'force_import_type' => null,
        'need_to_check' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'tape_library_id' => 'tape_library_id',
        'pool_id' => 'pool_id',
        'barcode' => 'barcode',
        'location' => 'location',
        'type' => 'type',
        'locked' => 'locked',
        'scratch' => 'scratch',
        'cleaning' => 'cleaning',
        'write_protect' => 'write_protect',
        'mounted' => 'mounted',
        'ejected' => 'ejected',
        'known' => 'known',
        'mount_count' => 'mount_count',
        'date_in' => 'date_in',
        'date_move' => 'date_move',
        'free' => 'free',
        'max' => 'max',
        'last_size_update' => 'last_size_update',
        'last_maintenance' => 'last_maintenance',
        'last_repack' => 'last_repack',
        'repack_status' => 'repack_status',
        'hash' => 'hash',
        'force_import_type' => 'force_import_type',
        'need_to_check' => 'need_to_check'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'tape_library_id' => 'setTapeLibraryId',
        'pool_id' => 'setPoolId',
        'barcode' => 'setBarcode',
        'location' => 'setLocation',
        'type' => 'setType',
        'locked' => 'setLocked',
        'scratch' => 'setScratch',
        'cleaning' => 'setCleaning',
        'write_protect' => 'setWriteProtect',
        'mounted' => 'setMounted',
        'ejected' => 'setEjected',
        'known' => 'setKnown',
        'mount_count' => 'setMountCount',
        'date_in' => 'setDateIn',
        'date_move' => 'setDateMove',
        'free' => 'setFree',
        'max' => 'setMax',
        'last_size_update' => 'setLastSizeUpdate',
        'last_maintenance' => 'setLastMaintenance',
        'last_repack' => 'setLastRepack',
        'repack_status' => 'setRepackStatus',
        'hash' => 'setHash',
        'force_import_type' => 'setForceImportType',
        'need_to_check' => 'setNeedToCheck'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'tape_library_id' => 'getTapeLibraryId',
        'pool_id' => 'getPoolId',
        'barcode' => 'getBarcode',
        'location' => 'getLocation',
        'type' => 'getType',
        'locked' => 'getLocked',
        'scratch' => 'getScratch',
        'cleaning' => 'getCleaning',
        'write_protect' => 'getWriteProtect',
        'mounted' => 'getMounted',
        'ejected' => 'getEjected',
        'known' => 'getKnown',
        'mount_count' => 'getMountCount',
        'date_in' => 'getDateIn',
        'date_move' => 'getDateMove',
        'free' => 'getFree',
        'max' => 'getMax',
        'last_size_update' => 'getLastSizeUpdate',
        'last_maintenance' => 'getLastMaintenance',
        'last_repack' => 'getLastRepack',
        'repack_status' => 'getRepackStatus',
        'hash' => 'getHash',
        'force_import_type' => 'getForceImportType',
        'need_to_check' => 'getNeedToCheck'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_UNKNOWN = 'unknown';
    const TYPE_DATA = 'data';
    const TYPE_CLEANING = 'cleaning';
    const TYPE_DIAGNOSTIC = 'diagnostic';
    const TYPE_DATA_LTO1 = 'data_lto1';
    const TYPE_DATA_LTO2 = 'data_lto2';
    const TYPE_DATA_LTO3 = 'data_lto3';
    const TYPE_DATA_LTO4 = 'data_lto4';
    const TYPE_DATA_LTO5 = 'data_lto5';
    const TYPE_DATA_LTO6 = 'data_lto6';
    const TYPE_DATA_LTO7 = 'data_lto7';
    const TYPE_DATA_LTO8 = 'data_lto8';
    const TYPE_DATA_LTO9 = 'data_lto9';
    const TYPE_DATA_LTO10 = 'data_lto10';
    const TYPE_DATA_LTO11 = 'data_lto11';
    const TYPE_DATA_LTO12 = 'data_lto12';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNKNOWN,
            self::TYPE_DATA,
            self::TYPE_CLEANING,
            self::TYPE_DIAGNOSTIC,
            self::TYPE_DATA_LTO1,
            self::TYPE_DATA_LTO2,
            self::TYPE_DATA_LTO3,
            self::TYPE_DATA_LTO4,
            self::TYPE_DATA_LTO5,
            self::TYPE_DATA_LTO6,
            self::TYPE_DATA_LTO7,
            self::TYPE_DATA_LTO8,
            self::TYPE_DATA_LTO9,
            self::TYPE_DATA_LTO10,
            self::TYPE_DATA_LTO11,
            self::TYPE_DATA_LTO12,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['tape_library_id'] = isset($data['tape_library_id']) ? $data['tape_library_id'] : null;
        $this->container['pool_id'] = isset($data['pool_id']) ? $data['pool_id'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['scratch'] = isset($data['scratch']) ? $data['scratch'] : null;
        $this->container['cleaning'] = isset($data['cleaning']) ? $data['cleaning'] : null;
        $this->container['write_protect'] = isset($data['write_protect']) ? $data['write_protect'] : null;
        $this->container['mounted'] = isset($data['mounted']) ? $data['mounted'] : null;
        $this->container['ejected'] = isset($data['ejected']) ? $data['ejected'] : null;
        $this->container['known'] = isset($data['known']) ? $data['known'] : null;
        $this->container['mount_count'] = isset($data['mount_count']) ? $data['mount_count'] : null;
        $this->container['date_in'] = isset($data['date_in']) ? $data['date_in'] : null;
        $this->container['date_move'] = isset($data['date_move']) ? $data['date_move'] : null;
        $this->container['free'] = isset($data['free']) ? $data['free'] : null;
        $this->container['max'] = isset($data['max']) ? $data['max'] : null;
        $this->container['last_size_update'] = isset($data['last_size_update']) ? $data['last_size_update'] : null;
        $this->container['last_maintenance'] = isset($data['last_maintenance']) ? $data['last_maintenance'] : null;
        $this->container['last_repack'] = isset($data['last_repack']) ? $data['last_repack'] : null;
        $this->container['repack_status'] = isset($data['repack_status']) ? $data['repack_status'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['force_import_type'] = isset($data['force_import_type']) ? $data['force_import_type'] : null;
        $this->container['need_to_check'] = isset($data['need_to_check']) ? $data['need_to_check'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tape_library_id
     *
     * @return int|null
     */
    public function getTapeLibraryId()
    {
        return $this->container['tape_library_id'];
    }

    /**
     * Sets tape_library_id
     *
     * @param int|null $tape_library_id tape_library_id
     *
     * @return $this
     */
    public function setTapeLibraryId($tape_library_id)
    {
        $this->container['tape_library_id'] = $tape_library_id;

        return $this;
    }

    /**
     * Gets pool_id
     *
     * @return int|null
     */
    public function getPoolId()
    {
        return $this->container['pool_id'];
    }

    /**
     * Sets pool_id
     *
     * @param int|null $pool_id pool_id
     *
     * @return $this
     */
    public function setPoolId($pool_id)
    {
        $this->container['pool_id'] = $pool_id;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool|null $locked locked
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets scratch
     *
     * @return bool|null
     */
    public function getScratch()
    {
        return $this->container['scratch'];
    }

    /**
     * Sets scratch
     *
     * @param bool|null $scratch scratch
     *
     * @return $this
     */
    public function setScratch($scratch)
    {
        $this->container['scratch'] = $scratch;

        return $this;
    }

    /**
     * Gets cleaning
     *
     * @return bool|null
     */
    public function getCleaning()
    {
        return $this->container['cleaning'];
    }

    /**
     * Sets cleaning
     *
     * @param bool|null $cleaning cleaning
     *
     * @return $this
     */
    public function setCleaning($cleaning)
    {
        $this->container['cleaning'] = $cleaning;

        return $this;
    }

    /**
     * Gets write_protect
     *
     * @return bool|null
     */
    public function getWriteProtect()
    {
        return $this->container['write_protect'];
    }

    /**
     * Sets write_protect
     *
     * @param bool|null $write_protect write_protect
     *
     * @return $this
     */
    public function setWriteProtect($write_protect)
    {
        $this->container['write_protect'] = $write_protect;

        return $this;
    }

    /**
     * Gets mounted
     *
     * @return bool|null
     */
    public function getMounted()
    {
        return $this->container['mounted'];
    }

    /**
     * Sets mounted
     *
     * @param bool|null $mounted mounted
     *
     * @return $this
     */
    public function setMounted($mounted)
    {
        $this->container['mounted'] = $mounted;

        return $this;
    }

    /**
     * Gets ejected
     *
     * @return bool|null
     */
    public function getEjected()
    {
        return $this->container['ejected'];
    }

    /**
     * Sets ejected
     *
     * @param bool|null $ejected ejected
     *
     * @return $this
     */
    public function setEjected($ejected)
    {
        $this->container['ejected'] = $ejected;

        return $this;
    }

    /**
     * Gets known
     *
     * @return bool|null
     */
    public function getKnown()
    {
        return $this->container['known'];
    }

    /**
     * Sets known
     *
     * @param bool|null $known known
     *
     * @return $this
     */
    public function setKnown($known)
    {
        $this->container['known'] = $known;

        return $this;
    }

    /**
     * Gets mount_count
     *
     * @return int|null
     */
    public function getMountCount()
    {
        return $this->container['mount_count'];
    }

    /**
     * Sets mount_count
     *
     * @param int|null $mount_count mount_count
     *
     * @return $this
     */
    public function setMountCount($mount_count)
    {
        $this->container['mount_count'] = $mount_count;

        return $this;
    }

    /**
     * Gets date_in
     *
     * @return string|null
     */
    public function getDateIn()
    {
        return $this->container['date_in'];
    }

    /**
     * Sets date_in
     *
     * @param string|null $date_in date_in
     *
     * @return $this
     */
    public function setDateIn($date_in)
    {
        $this->container['date_in'] = $date_in;

        return $this;
    }

    /**
     * Gets date_move
     *
     * @return string|null
     */
    public function getDateMove()
    {
        return $this->container['date_move'];
    }

    /**
     * Sets date_move
     *
     * @param string|null $date_move date_move
     *
     * @return $this
     */
    public function setDateMove($date_move)
    {
        $this->container['date_move'] = $date_move;

        return $this;
    }

    /**
     * Gets free
     *
     * @return int|null
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param int|null $free free
     *
     * @return $this
     */
    public function setFree($free)
    {
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets max
     *
     * @return int|null
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param int|null $max max
     *
     * @return $this
     */
    public function setMax($max)
    {
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets last_size_update
     *
     * @return string|null
     */
    public function getLastSizeUpdate()
    {
        return $this->container['last_size_update'];
    }

    /**
     * Sets last_size_update
     *
     * @param string|null $last_size_update last_size_update
     *
     * @return $this
     */
    public function setLastSizeUpdate($last_size_update)
    {
        $this->container['last_size_update'] = $last_size_update;

        return $this;
    }

    /**
     * Gets last_maintenance
     *
     * @return string|null
     */
    public function getLastMaintenance()
    {
        return $this->container['last_maintenance'];
    }

    /**
     * Sets last_maintenance
     *
     * @param string|null $last_maintenance last_maintenance
     *
     * @return $this
     */
    public function setLastMaintenance($last_maintenance)
    {
        $this->container['last_maintenance'] = $last_maintenance;

        return $this;
    }

    /**
     * Gets last_repack
     *
     * @return string|null
     */
    public function getLastRepack()
    {
        return $this->container['last_repack'];
    }

    /**
     * Sets last_repack
     *
     * @param string|null $last_repack last_repack
     *
     * @return $this
     */
    public function setLastRepack($last_repack)
    {
        $this->container['last_repack'] = $last_repack;

        return $this;
    }

    /**
     * Gets repack_status
     *
     * @return bool|null
     */
    public function getRepackStatus()
    {
        return $this->container['repack_status'];
    }

    /**
     * Sets repack_status
     *
     * @param bool|null $repack_status repack_status
     *
     * @return $this
     */
    public function setRepackStatus($repack_status)
    {
        $this->container['repack_status'] = $repack_status;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash hash
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets force_import_type
     *
     * @return bool|null
     */
    public function getForceImportType()
    {
        return $this->container['force_import_type'];
    }

    /**
     * Sets force_import_type
     *
     * @param bool|null $force_import_type force_import_type
     *
     * @return $this
     */
    public function setForceImportType($force_import_type)
    {
        $this->container['force_import_type'] = $force_import_type;

        return $this;
    }

    /**
     * Gets need_to_check
     *
     * @return bool|null
     */
    public function getNeedToCheck()
    {
        return $this->container['need_to_check'];
    }

    /**
     * Sets need_to_check
     *
     * @param bool|null $need_to_check need_to_check
     *
     * @return $this
     */
    public function setNeedToCheck($need_to_check)
    {
        $this->container['need_to_check'] = $need_to_check;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


