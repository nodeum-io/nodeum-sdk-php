<?php
/**
 * TapeDrivesApi
 * PHP version 5
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NodeumSDK\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NodeumSDK\Client\ApiException;
use NodeumSDK\Client\Configuration;
use NodeumSDK\Client\HeaderSelector;
use NodeumSDK\Client\ObjectSerializer;

/**
 * TapeDrivesApi Class Doc Comment
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TapeDrivesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createTapeDriveByTapeLibrary
     *
     * Creates a new tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body tape_drive_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeDrive|\NodeumSDK\Client\Model\Error
     */
    public function createTapeDriveByTapeLibrary($tape_library_id, $tape_drive_body)
    {
        list($response) = $this->createTapeDriveByTapeLibraryWithHttpInfo($tape_library_id, $tape_drive_body);
        return $response;
    }

    /**
     * Operation createTapeDriveByTapeLibraryWithHttpInfo
     *
     * Creates a new tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeDrive|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTapeDriveByTapeLibraryWithHttpInfo($tape_library_id, $tape_drive_body)
    {
        $request = $this->createTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\NodeumSDK\Client\Model\TapeDrive' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeDrive', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeDrive';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeDrive',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTapeDriveByTapeLibraryAsync
     *
     * Creates a new tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTapeDriveByTapeLibraryAsync($tape_library_id, $tape_drive_body)
    {
        return $this->createTapeDriveByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_drive_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTapeDriveByTapeLibraryAsyncWithHttpInfo
     *
     * Creates a new tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTapeDriveByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_drive_body)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeDrive';
        $request = $this->createTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTapeDriveByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_body)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling createTapeDriveByTapeLibrary'
            );
        }
        // verify the required parameter 'tape_drive_body' is set
        if ($tape_drive_body === null || (is_array($tape_drive_body) && count($tape_drive_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_body when calling createTapeDriveByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tape_drives';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($tape_drive_body)) {
            $_tempBody = $tape_drive_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyTapeDrive
     *
     * Destroys a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyTapeDrive($tape_drive_id)
    {
        $this->destroyTapeDriveWithHttpInfo($tape_drive_id);
    }

    /**
     * Operation destroyTapeDriveWithHttpInfo
     *
     * Destroys a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyTapeDriveWithHttpInfo($tape_drive_id)
    {
        $request = $this->destroyTapeDriveRequest($tape_drive_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyTapeDriveAsync
     *
     * Destroys a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyTapeDriveAsync($tape_drive_id)
    {
        return $this->destroyTapeDriveAsyncWithHttpInfo($tape_drive_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyTapeDriveAsyncWithHttpInfo
     *
     * Destroys a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyTapeDriveAsyncWithHttpInfo($tape_drive_id)
    {
        $returnType = '';
        $request = $this->destroyTapeDriveRequest($tape_drive_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyTapeDrive'
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyTapeDriveRequest($tape_drive_id)
    {
        // verify the required parameter 'tape_drive_id' is set
        if ($tape_drive_id === null || (is_array($tape_drive_id) && count($tape_drive_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_id when calling destroyTapeDrive'
            );
        }

        $resourcePath = '/tape_drives/{tape_drive_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_drive_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_drive_id' . '}',
                ObjectSerializer::toPathValue($tape_drive_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyTapeDriveByTapeLibrary
     *
     * Destroys a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyTapeDriveByTapeLibrary($tape_library_id, $tape_drive_id)
    {
        $this->destroyTapeDriveByTapeLibraryWithHttpInfo($tape_library_id, $tape_drive_id);
    }

    /**
     * Operation destroyTapeDriveByTapeLibraryWithHttpInfo
     *
     * Destroys a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyTapeDriveByTapeLibraryWithHttpInfo($tape_library_id, $tape_drive_id)
    {
        $request = $this->destroyTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyTapeDriveByTapeLibraryAsync
     *
     * Destroys a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyTapeDriveByTapeLibraryAsync($tape_library_id, $tape_drive_id)
    {
        return $this->destroyTapeDriveByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_drive_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyTapeDriveByTapeLibraryAsyncWithHttpInfo
     *
     * Destroys a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyTapeDriveByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_drive_id)
    {
        $returnType = '';
        $request = $this->destroyTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyTapeDriveByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling destroyTapeDriveByTapeLibrary'
            );
        }
        // verify the required parameter 'tape_drive_id' is set
        if ($tape_drive_id === null || (is_array($tape_drive_id) && count($tape_drive_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_id when calling destroyTapeDriveByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_drive_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_drive_id' . '}',
                ObjectSerializer::toPathValue($tape_drive_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexTapeDriveDevices
     *
     * Lists tape drives devices.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeDriveDeviceCollection|\NodeumSDK\Client\Model\ActiveJobStatus|\NodeumSDK\Client\Model\ActiveJobStatus
     */
    public function indexTapeDriveDevices($tape_library_id, $job_id)
    {
        list($response) = $this->indexTapeDriveDevicesWithHttpInfo($tape_library_id, $job_id);
        return $response;
    }

    /**
     * Operation indexTapeDriveDevicesWithHttpInfo
     *
     * Lists tape drives devices.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeDriveDeviceCollection|\NodeumSDK\Client\Model\ActiveJobStatus|\NodeumSDK\Client\Model\ActiveJobStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTapeDriveDevicesWithHttpInfo($tape_library_id, $job_id)
    {
        $request = $this->indexTapeDriveDevicesRequest($tape_library_id, $job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeDriveDeviceCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeDriveDeviceCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\NodeumSDK\Client\Model\ActiveJobStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ActiveJobStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\NodeumSDK\Client\Model\ActiveJobStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\ActiveJobStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeDriveDeviceCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeDriveDeviceCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ActiveJobStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\ActiveJobStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTapeDriveDevicesAsync
     *
     * Lists tape drives devices.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapeDriveDevicesAsync($tape_library_id, $job_id)
    {
        return $this->indexTapeDriveDevicesAsyncWithHttpInfo($tape_library_id, $job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTapeDriveDevicesAsyncWithHttpInfo
     *
     * Lists tape drives devices.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapeDriveDevicesAsyncWithHttpInfo($tape_library_id, $job_id)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeDriveDeviceCollection';
        $request = $this->indexTapeDriveDevicesRequest($tape_library_id, $job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTapeDriveDevices'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $job_id ID of active job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTapeDriveDevicesRequest($tape_library_id, $job_id)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling indexTapeDriveDevices'
            );
        }
        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling indexTapeDriveDevices'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tape_drives/-/devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($job_id)) {
            $job_id = ObjectSerializer::serializeCollection($job_id, '', true);
        }
        if ($job_id !== null) {
            $queryParams['job_id'] = $job_id;
        }


        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'queued', 'working', 'failed', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'queued', 'working', 'failed', ],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexTapeDrives
     *
     * Lists all tape drives.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeDriveCollection
     */
    public function indexTapeDrives($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        list($response) = $this->indexTapeDrivesWithHttpInfo($limit, $offset, $sort_by, $id, $tape_library_id, $name, $serial, $comment, $scsi_address, $vendor, $product, $firmware, $device, $sgdevice, $libso, $acs, $lsm, $panel, $transport, $status, $full, $mount_count, $use_to, $use_by, $barcode, $task_id, $use_file_processed_size, $use_file_size_to_process, $use_file_name_processed, $bandwidth);
        return $response;
    }

    /**
     * Operation indexTapeDrivesWithHttpInfo
     *
     * Lists all tape drives.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeDriveCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTapeDrivesWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        $request = $this->indexTapeDrivesRequest($limit, $offset, $sort_by, $id, $tape_library_id, $name, $serial, $comment, $scsi_address, $vendor, $product, $firmware, $device, $sgdevice, $libso, $acs, $lsm, $panel, $transport, $status, $full, $mount_count, $use_to, $use_by, $barcode, $task_id, $use_file_processed_size, $use_file_size_to_process, $use_file_name_processed, $bandwidth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeDriveCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeDriveCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeDriveCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeDriveCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTapeDrivesAsync
     *
     * Lists all tape drives.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapeDrivesAsync($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        return $this->indexTapeDrivesAsyncWithHttpInfo($limit, $offset, $sort_by, $id, $tape_library_id, $name, $serial, $comment, $scsi_address, $vendor, $product, $firmware, $device, $sgdevice, $libso, $acs, $lsm, $panel, $transport, $status, $full, $mount_count, $use_to, $use_by, $barcode, $task_id, $use_file_processed_size, $use_file_size_to_process, $use_file_name_processed, $bandwidth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTapeDrivesAsyncWithHttpInfo
     *
     * Lists all tape drives.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapeDrivesAsyncWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeDriveCollection';
        $request = $this->indexTapeDrivesRequest($limit, $offset, $sort_by, $id, $tape_library_id, $name, $serial, $comment, $scsi_address, $vendor, $product, $firmware, $device, $sgdevice, $libso, $acs, $lsm, $panel, $transport, $status, $full, $mount_count, $use_to, $use_by, $barcode, $task_id, $use_file_processed_size, $use_file_size_to_process, $use_file_name_processed, $bandwidth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTapeDrives'
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTapeDrivesRequest($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {

        $resourcePath = '/tape_drives';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($tape_library_id)) {
            $tape_library_id = ObjectSerializer::serializeCollection($tape_library_id, '', true);
        }
        if ($tape_library_id !== null) {
            $queryParams['tape_library_id'] = $tape_library_id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($serial)) {
            $serial = ObjectSerializer::serializeCollection($serial, '', true);
        }
        if ($serial !== null) {
            $queryParams['serial'] = $serial;
        }
        // query params
        if (is_array($comment)) {
            $comment = ObjectSerializer::serializeCollection($comment, '', true);
        }
        if ($comment !== null) {
            $queryParams['comment'] = $comment;
        }
        // query params
        if (is_array($scsi_address)) {
            $scsi_address = ObjectSerializer::serializeCollection($scsi_address, '', true);
        }
        if ($scsi_address !== null) {
            $queryParams['scsi_address'] = $scsi_address;
        }
        // query params
        if (is_array($vendor)) {
            $vendor = ObjectSerializer::serializeCollection($vendor, '', true);
        }
        if ($vendor !== null) {
            $queryParams['vendor'] = $vendor;
        }
        // query params
        if (is_array($product)) {
            $product = ObjectSerializer::serializeCollection($product, '', true);
        }
        if ($product !== null) {
            $queryParams['product'] = $product;
        }
        // query params
        if (is_array($firmware)) {
            $firmware = ObjectSerializer::serializeCollection($firmware, '', true);
        }
        if ($firmware !== null) {
            $queryParams['firmware'] = $firmware;
        }
        // query params
        if (is_array($device)) {
            $device = ObjectSerializer::serializeCollection($device, '', true);
        }
        if ($device !== null) {
            $queryParams['device'] = $device;
        }
        // query params
        if (is_array($sgdevice)) {
            $sgdevice = ObjectSerializer::serializeCollection($sgdevice, '', true);
        }
        if ($sgdevice !== null) {
            $queryParams['sgdevice'] = $sgdevice;
        }
        // query params
        if (is_array($libso)) {
            $libso = ObjectSerializer::serializeCollection($libso, '', true);
        }
        if ($libso !== null) {
            $queryParams['libso'] = $libso;
        }
        // query params
        if (is_array($acs)) {
            $acs = ObjectSerializer::serializeCollection($acs, '', true);
        }
        if ($acs !== null) {
            $queryParams['acs'] = $acs;
        }
        // query params
        if (is_array($lsm)) {
            $lsm = ObjectSerializer::serializeCollection($lsm, '', true);
        }
        if ($lsm !== null) {
            $queryParams['lsm'] = $lsm;
        }
        // query params
        if (is_array($panel)) {
            $panel = ObjectSerializer::serializeCollection($panel, '', true);
        }
        if ($panel !== null) {
            $queryParams['panel'] = $panel;
        }
        // query params
        if (is_array($transport)) {
            $transport = ObjectSerializer::serializeCollection($transport, '', true);
        }
        if ($transport !== null) {
            $queryParams['transport'] = $transport;
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if (is_array($full)) {
            $full = ObjectSerializer::serializeCollection($full, '', true);
        }
        if ($full !== null) {
            $queryParams['full'] = $full;
        }
        // query params
        if (is_array($mount_count)) {
            $mount_count = ObjectSerializer::serializeCollection($mount_count, '', true);
        }
        if ($mount_count !== null) {
            $queryParams['mount_count'] = $mount_count;
        }
        // query params
        if (is_array($use_to)) {
            $use_to = ObjectSerializer::serializeCollection($use_to, '', true);
        }
        if ($use_to !== null) {
            $queryParams['use_to'] = $use_to;
        }
        // query params
        if (is_array($use_by)) {
            $use_by = ObjectSerializer::serializeCollection($use_by, '', true);
        }
        if ($use_by !== null) {
            $queryParams['use_by'] = $use_by;
        }
        // query params
        if (is_array($barcode)) {
            $barcode = ObjectSerializer::serializeCollection($barcode, '', true);
        }
        if ($barcode !== null) {
            $queryParams['barcode'] = $barcode;
        }
        // query params
        if (is_array($task_id)) {
            $task_id = ObjectSerializer::serializeCollection($task_id, '', true);
        }
        if ($task_id !== null) {
            $queryParams['task_id'] = $task_id;
        }
        // query params
        if (is_array($use_file_processed_size)) {
            $use_file_processed_size = ObjectSerializer::serializeCollection($use_file_processed_size, '', true);
        }
        if ($use_file_processed_size !== null) {
            $queryParams['use_file_processed_size'] = $use_file_processed_size;
        }
        // query params
        if (is_array($use_file_size_to_process)) {
            $use_file_size_to_process = ObjectSerializer::serializeCollection($use_file_size_to_process, '', true);
        }
        if ($use_file_size_to_process !== null) {
            $queryParams['use_file_size_to_process'] = $use_file_size_to_process;
        }
        // query params
        if (is_array($use_file_name_processed)) {
            $use_file_name_processed = ObjectSerializer::serializeCollection($use_file_name_processed, '', true);
        }
        if ($use_file_name_processed !== null) {
            $queryParams['use_file_name_processed'] = $use_file_name_processed;
        }
        // query params
        if (is_array($bandwidth)) {
            $bandwidth = ObjectSerializer::serializeCollection($bandwidth, '', true);
        }
        if ($bandwidth !== null) {
            $queryParams['bandwidth'] = $bandwidth;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexTapeDrivesByTapeLibrary
     *
     * Lists all tape drives.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeDriveCollection
     */
    public function indexTapeDrivesByTapeLibrary($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        list($response) = $this->indexTapeDrivesByTapeLibraryWithHttpInfo($tape_library_id, $limit, $offset, $sort_by, $id, $name, $serial, $comment, $scsi_address, $vendor, $product, $firmware, $device, $sgdevice, $libso, $acs, $lsm, $panel, $transport, $status, $full, $mount_count, $use_to, $use_by, $barcode, $task_id, $use_file_processed_size, $use_file_size_to_process, $use_file_name_processed, $bandwidth);
        return $response;
    }

    /**
     * Operation indexTapeDrivesByTapeLibraryWithHttpInfo
     *
     * Lists all tape drives.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeDriveCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTapeDrivesByTapeLibraryWithHttpInfo($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        $request = $this->indexTapeDrivesByTapeLibraryRequest($tape_library_id, $limit, $offset, $sort_by, $id, $name, $serial, $comment, $scsi_address, $vendor, $product, $firmware, $device, $sgdevice, $libso, $acs, $lsm, $panel, $transport, $status, $full, $mount_count, $use_to, $use_by, $barcode, $task_id, $use_file_processed_size, $use_file_size_to_process, $use_file_name_processed, $bandwidth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeDriveCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeDriveCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeDriveCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeDriveCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTapeDrivesByTapeLibraryAsync
     *
     * Lists all tape drives.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapeDrivesByTapeLibraryAsync($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        return $this->indexTapeDrivesByTapeLibraryAsyncWithHttpInfo($tape_library_id, $limit, $offset, $sort_by, $id, $name, $serial, $comment, $scsi_address, $vendor, $product, $firmware, $device, $sgdevice, $libso, $acs, $lsm, $panel, $transport, $status, $full, $mount_count, $use_to, $use_by, $barcode, $task_id, $use_file_processed_size, $use_file_size_to_process, $use_file_name_processed, $bandwidth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTapeDrivesByTapeLibraryAsyncWithHttpInfo
     *
     * Lists all tape drives.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapeDrivesByTapeLibraryAsyncWithHttpInfo($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeDriveCollection';
        $request = $this->indexTapeDrivesByTapeLibraryRequest($tape_library_id, $limit, $offset, $sort_by, $id, $name, $serial, $comment, $scsi_address, $vendor, $product, $firmware, $device, $sgdevice, $libso, $acs, $lsm, $panel, $transport, $status, $full, $mount_count, $use_to, $use_by, $barcode, $task_id, $use_file_processed_size, $use_file_size_to_process, $use_file_name_processed, $bandwidth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTapeDrivesByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $name Filter on name (optional)
     * @param  string $serial Filter on serial (optional)
     * @param  string $comment Filter on comment (optional)
     * @param  string $scsi_address Filter on scsi address (optional)
     * @param  string $vendor Filter on vendor (optional)
     * @param  string $product Filter on product (optional)
     * @param  string $firmware Filter on firmware (optional)
     * @param  string $device Filter on device (optional)
     * @param  string $sgdevice Filter on sgdevice (optional)
     * @param  string $libso Filter on libso (optional)
     * @param  string $acs Filter on acs (optional)
     * @param  string $lsm Filter on lsm (optional)
     * @param  string $panel Filter on panel (optional)
     * @param  string $transport Filter on transport (optional)
     * @param  string $status Filter on status (optional)
     * @param  string $full Filter on full (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $use_to Filter on use to (optional)
     * @param  string $use_by Filter on use by (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $task_id Filter on task id (optional)
     * @param  string $use_file_processed_size Filter on use file processed size (optional)
     * @param  string $use_file_size_to_process Filter on use file size to process (optional)
     * @param  string $use_file_name_processed Filter on use file name processed (optional)
     * @param  string $bandwidth Filter on bandwidth (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTapeDrivesByTapeLibraryRequest($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $name = null, $serial = null, $comment = null, $scsi_address = null, $vendor = null, $product = null, $firmware = null, $device = null, $sgdevice = null, $libso = null, $acs = null, $lsm = null, $panel = null, $transport = null, $status = null, $full = null, $mount_count = null, $use_to = null, $use_by = null, $barcode = null, $task_id = null, $use_file_processed_size = null, $use_file_size_to_process = null, $use_file_name_processed = null, $bandwidth = null)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling indexTapeDrivesByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tape_drives';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($serial)) {
            $serial = ObjectSerializer::serializeCollection($serial, '', true);
        }
        if ($serial !== null) {
            $queryParams['serial'] = $serial;
        }
        // query params
        if (is_array($comment)) {
            $comment = ObjectSerializer::serializeCollection($comment, '', true);
        }
        if ($comment !== null) {
            $queryParams['comment'] = $comment;
        }
        // query params
        if (is_array($scsi_address)) {
            $scsi_address = ObjectSerializer::serializeCollection($scsi_address, '', true);
        }
        if ($scsi_address !== null) {
            $queryParams['scsi_address'] = $scsi_address;
        }
        // query params
        if (is_array($vendor)) {
            $vendor = ObjectSerializer::serializeCollection($vendor, '', true);
        }
        if ($vendor !== null) {
            $queryParams['vendor'] = $vendor;
        }
        // query params
        if (is_array($product)) {
            $product = ObjectSerializer::serializeCollection($product, '', true);
        }
        if ($product !== null) {
            $queryParams['product'] = $product;
        }
        // query params
        if (is_array($firmware)) {
            $firmware = ObjectSerializer::serializeCollection($firmware, '', true);
        }
        if ($firmware !== null) {
            $queryParams['firmware'] = $firmware;
        }
        // query params
        if (is_array($device)) {
            $device = ObjectSerializer::serializeCollection($device, '', true);
        }
        if ($device !== null) {
            $queryParams['device'] = $device;
        }
        // query params
        if (is_array($sgdevice)) {
            $sgdevice = ObjectSerializer::serializeCollection($sgdevice, '', true);
        }
        if ($sgdevice !== null) {
            $queryParams['sgdevice'] = $sgdevice;
        }
        // query params
        if (is_array($libso)) {
            $libso = ObjectSerializer::serializeCollection($libso, '', true);
        }
        if ($libso !== null) {
            $queryParams['libso'] = $libso;
        }
        // query params
        if (is_array($acs)) {
            $acs = ObjectSerializer::serializeCollection($acs, '', true);
        }
        if ($acs !== null) {
            $queryParams['acs'] = $acs;
        }
        // query params
        if (is_array($lsm)) {
            $lsm = ObjectSerializer::serializeCollection($lsm, '', true);
        }
        if ($lsm !== null) {
            $queryParams['lsm'] = $lsm;
        }
        // query params
        if (is_array($panel)) {
            $panel = ObjectSerializer::serializeCollection($panel, '', true);
        }
        if ($panel !== null) {
            $queryParams['panel'] = $panel;
        }
        // query params
        if (is_array($transport)) {
            $transport = ObjectSerializer::serializeCollection($transport, '', true);
        }
        if ($transport !== null) {
            $queryParams['transport'] = $transport;
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if (is_array($full)) {
            $full = ObjectSerializer::serializeCollection($full, '', true);
        }
        if ($full !== null) {
            $queryParams['full'] = $full;
        }
        // query params
        if (is_array($mount_count)) {
            $mount_count = ObjectSerializer::serializeCollection($mount_count, '', true);
        }
        if ($mount_count !== null) {
            $queryParams['mount_count'] = $mount_count;
        }
        // query params
        if (is_array($use_to)) {
            $use_to = ObjectSerializer::serializeCollection($use_to, '', true);
        }
        if ($use_to !== null) {
            $queryParams['use_to'] = $use_to;
        }
        // query params
        if (is_array($use_by)) {
            $use_by = ObjectSerializer::serializeCollection($use_by, '', true);
        }
        if ($use_by !== null) {
            $queryParams['use_by'] = $use_by;
        }
        // query params
        if (is_array($barcode)) {
            $barcode = ObjectSerializer::serializeCollection($barcode, '', true);
        }
        if ($barcode !== null) {
            $queryParams['barcode'] = $barcode;
        }
        // query params
        if (is_array($task_id)) {
            $task_id = ObjectSerializer::serializeCollection($task_id, '', true);
        }
        if ($task_id !== null) {
            $queryParams['task_id'] = $task_id;
        }
        // query params
        if (is_array($use_file_processed_size)) {
            $use_file_processed_size = ObjectSerializer::serializeCollection($use_file_processed_size, '', true);
        }
        if ($use_file_processed_size !== null) {
            $queryParams['use_file_processed_size'] = $use_file_processed_size;
        }
        // query params
        if (is_array($use_file_size_to_process)) {
            $use_file_size_to_process = ObjectSerializer::serializeCollection($use_file_size_to_process, '', true);
        }
        if ($use_file_size_to_process !== null) {
            $queryParams['use_file_size_to_process'] = $use_file_size_to_process;
        }
        // query params
        if (is_array($use_file_name_processed)) {
            $use_file_name_processed = ObjectSerializer::serializeCollection($use_file_name_processed, '', true);
        }
        if ($use_file_name_processed !== null) {
            $queryParams['use_file_name_processed'] = $use_file_name_processed;
        }
        // query params
        if (is_array($bandwidth)) {
            $bandwidth = ObjectSerializer::serializeCollection($bandwidth, '', true);
        }
        if ($bandwidth !== null) {
            $queryParams['bandwidth'] = $bandwidth;
        }


        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTapeDrive
     *
     * Displays a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeDrive
     */
    public function showTapeDrive($tape_drive_id)
    {
        list($response) = $this->showTapeDriveWithHttpInfo($tape_drive_id);
        return $response;
    }

    /**
     * Operation showTapeDriveWithHttpInfo
     *
     * Displays a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeDrive, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTapeDriveWithHttpInfo($tape_drive_id)
    {
        $request = $this->showTapeDriveRequest($tape_drive_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeDrive' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeDrive', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeDrive';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeDrive',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTapeDriveAsync
     *
     * Displays a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeDriveAsync($tape_drive_id)
    {
        return $this->showTapeDriveAsyncWithHttpInfo($tape_drive_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTapeDriveAsyncWithHttpInfo
     *
     * Displays a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeDriveAsyncWithHttpInfo($tape_drive_id)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeDrive';
        $request = $this->showTapeDriveRequest($tape_drive_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTapeDrive'
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTapeDriveRequest($tape_drive_id)
    {
        // verify the required parameter 'tape_drive_id' is set
        if ($tape_drive_id === null || (is_array($tape_drive_id) && count($tape_drive_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_id when calling showTapeDrive'
            );
        }

        $resourcePath = '/tape_drives/{tape_drive_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_drive_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_drive_id' . '}',
                ObjectSerializer::toPathValue($tape_drive_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTapeDriveByTapeLibrary
     *
     * Displays a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeDrive
     */
    public function showTapeDriveByTapeLibrary($tape_library_id, $tape_drive_id)
    {
        list($response) = $this->showTapeDriveByTapeLibraryWithHttpInfo($tape_library_id, $tape_drive_id);
        return $response;
    }

    /**
     * Operation showTapeDriveByTapeLibraryWithHttpInfo
     *
     * Displays a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeDrive, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTapeDriveByTapeLibraryWithHttpInfo($tape_library_id, $tape_drive_id)
    {
        $request = $this->showTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeDrive' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeDrive', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeDrive';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeDrive',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTapeDriveByTapeLibraryAsync
     *
     * Displays a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeDriveByTapeLibraryAsync($tape_library_id, $tape_drive_id)
    {
        return $this->showTapeDriveByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_drive_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTapeDriveByTapeLibraryAsyncWithHttpInfo
     *
     * Displays a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeDriveByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_drive_id)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeDrive';
        $request = $this->showTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTapeDriveByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling showTapeDriveByTapeLibrary'
            );
        }
        // verify the required parameter 'tape_drive_id' is set
        if ($tape_drive_id === null || (is_array($tape_drive_id) && count($tape_drive_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_id when calling showTapeDriveByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_drive_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_drive_id' . '}',
                ObjectSerializer::toPathValue($tape_drive_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTapeDrive
     *
     * Updates a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body tape_drive_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeDrive|\NodeumSDK\Client\Model\Error
     */
    public function updateTapeDrive($tape_drive_id, $tape_drive_body)
    {
        list($response) = $this->updateTapeDriveWithHttpInfo($tape_drive_id, $tape_drive_body);
        return $response;
    }

    /**
     * Operation updateTapeDriveWithHttpInfo
     *
     * Updates a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeDrive|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTapeDriveWithHttpInfo($tape_drive_id, $tape_drive_body)
    {
        $request = $this->updateTapeDriveRequest($tape_drive_id, $tape_drive_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeDrive' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeDrive', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeDrive';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeDrive',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTapeDriveAsync
     *
     * Updates a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTapeDriveAsync($tape_drive_id, $tape_drive_body)
    {
        return $this->updateTapeDriveAsyncWithHttpInfo($tape_drive_id, $tape_drive_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTapeDriveAsyncWithHttpInfo
     *
     * Updates a specific tape drive.
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTapeDriveAsyncWithHttpInfo($tape_drive_id, $tape_drive_body)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeDrive';
        $request = $this->updateTapeDriveRequest($tape_drive_id, $tape_drive_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTapeDrive'
     *
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTapeDriveRequest($tape_drive_id, $tape_drive_body)
    {
        // verify the required parameter 'tape_drive_id' is set
        if ($tape_drive_id === null || (is_array($tape_drive_id) && count($tape_drive_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_id when calling updateTapeDrive'
            );
        }
        // verify the required parameter 'tape_drive_body' is set
        if ($tape_drive_body === null || (is_array($tape_drive_body) && count($tape_drive_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_body when calling updateTapeDrive'
            );
        }

        $resourcePath = '/tape_drives/{tape_drive_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_drive_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_drive_id' . '}',
                ObjectSerializer::toPathValue($tape_drive_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($tape_drive_body)) {
            $_tempBody = $tape_drive_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTapeDriveByTapeLibrary
     *
     * Updates a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body tape_drive_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeDrive|\NodeumSDK\Client\Model\Error
     */
    public function updateTapeDriveByTapeLibrary($tape_library_id, $tape_drive_id, $tape_drive_body)
    {
        list($response) = $this->updateTapeDriveByTapeLibraryWithHttpInfo($tape_library_id, $tape_drive_id, $tape_drive_body);
        return $response;
    }

    /**
     * Operation updateTapeDriveByTapeLibraryWithHttpInfo
     *
     * Updates a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeDrive|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTapeDriveByTapeLibraryWithHttpInfo($tape_library_id, $tape_drive_id, $tape_drive_body)
    {
        $request = $this->updateTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id, $tape_drive_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeDrive' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeDrive', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeDrive';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeDrive',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTapeDriveByTapeLibraryAsync
     *
     * Updates a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTapeDriveByTapeLibraryAsync($tape_library_id, $tape_drive_id, $tape_drive_body)
    {
        return $this->updateTapeDriveByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_drive_id, $tape_drive_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTapeDriveByTapeLibraryAsyncWithHttpInfo
     *
     * Updates a specific tape drive.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTapeDriveByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_drive_id, $tape_drive_body)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeDrive';
        $request = $this->updateTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id, $tape_drive_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTapeDriveByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_drive_id Numeric ID, serial, or name of tape drive. (required)
     * @param  \NodeumSDK\Client\Model\TapeDrive $tape_drive_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTapeDriveByTapeLibraryRequest($tape_library_id, $tape_drive_id, $tape_drive_body)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling updateTapeDriveByTapeLibrary'
            );
        }
        // verify the required parameter 'tape_drive_id' is set
        if ($tape_drive_id === null || (is_array($tape_drive_id) && count($tape_drive_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_id when calling updateTapeDriveByTapeLibrary'
            );
        }
        // verify the required parameter 'tape_drive_body' is set
        if ($tape_drive_body === null || (is_array($tape_drive_body) && count($tape_drive_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_drive_body when calling updateTapeDriveByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_drive_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_drive_id' . '}',
                ObjectSerializer::toPathValue($tape_drive_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($tape_drive_body)) {
            $_tempBody = $tape_drive_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
