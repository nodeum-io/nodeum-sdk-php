<?php
/**
 * TapesApi
 * PHP version 5
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NodeumSDK\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NodeumSDK\Client\ApiException;
use NodeumSDK\Client\Configuration;
use NodeumSDK\Client\HeaderSelector;
use NodeumSDK\Client\ObjectSerializer;

/**
 * TapesApi Class Doc Comment
 *
 * @category Class
 * @package  NodeumSDK\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TapesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation destroyTape
     *
     * Destroys a specific tape. Only when it's an orphan.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyTape($tape_id)
    {
        $this->destroyTapeWithHttpInfo($tape_id);
    }

    /**
     * Operation destroyTapeWithHttpInfo
     *
     * Destroys a specific tape. Only when it's an orphan.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyTapeWithHttpInfo($tape_id)
    {
        $request = $this->destroyTapeRequest($tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyTapeAsync
     *
     * Destroys a specific tape. Only when it's an orphan.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyTapeAsync($tape_id)
    {
        return $this->destroyTapeAsyncWithHttpInfo($tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyTapeAsyncWithHttpInfo
     *
     * Destroys a specific tape. Only when it's an orphan.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyTapeAsyncWithHttpInfo($tape_id)
    {
        $returnType = '';
        $request = $this->destroyTapeRequest($tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyTape'
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyTapeRequest($tape_id)
    {
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling destroyTape'
            );
        }

        $resourcePath = '/tapes/{tape_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexTapeStats
     *
     * List all tape statistics.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeStatCollection|\NodeumSDK\Client\Model\Error
     */
    public function indexTapeStats($limit = null, $offset = null)
    {
        list($response) = $this->indexTapeStatsWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation indexTapeStatsWithHttpInfo
     *
     * List all tape statistics.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeStatCollection|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTapeStatsWithHttpInfo($limit = null, $offset = null)
    {
        $request = $this->indexTapeStatsRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeStatCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeStatCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeStatCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeStatCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTapeStatsAsync
     *
     * List all tape statistics.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapeStatsAsync($limit = null, $offset = null)
    {
        return $this->indexTapeStatsAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTapeStatsAsyncWithHttpInfo
     *
     * List all tape statistics.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapeStatsAsyncWithHttpInfo($limit = null, $offset = null)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeStatCollection';
        $request = $this->indexTapeStatsRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTapeStats'
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTapeStatsRequest($limit = null, $offset = null)
    {

        $resourcePath = '/tape_stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexTapes
     *
     * Lists all tapes.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeCollection
     */
    public function indexTapes($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        list($response) = $this->indexTapesWithHttpInfo($limit, $offset, $sort_by, $id, $tape_library_id, $pool_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);
        return $response;
    }

    /**
     * Operation indexTapesWithHttpInfo
     *
     * Lists all tapes.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTapesWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        $request = $this->indexTapesRequest($limit, $offset, $sort_by, $id, $tape_library_id, $pool_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTapesAsync
     *
     * Lists all tapes.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapesAsync($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        return $this->indexTapesAsyncWithHttpInfo($limit, $offset, $sort_by, $id, $tape_library_id, $pool_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTapesAsyncWithHttpInfo
     *
     * Lists all tapes.
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapesAsyncWithHttpInfo($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeCollection';
        $request = $this->indexTapesRequest($limit, $offset, $sort_by, $id, $tape_library_id, $pool_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTapes'
     *
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTapesRequest($limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {

        $resourcePath = '/tapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($tape_library_id)) {
            $tape_library_id = ObjectSerializer::serializeCollection($tape_library_id, '', true);
        }
        if ($tape_library_id !== null) {
            $queryParams['tape_library_id'] = $tape_library_id;
        }
        // query params
        if (is_array($pool_id)) {
            $pool_id = ObjectSerializer::serializeCollection($pool_id, '', true);
        }
        if ($pool_id !== null) {
            $queryParams['pool_id'] = $pool_id;
        }
        // query params
        if (is_array($barcode)) {
            $barcode = ObjectSerializer::serializeCollection($barcode, '', true);
        }
        if ($barcode !== null) {
            $queryParams['barcode'] = $barcode;
        }
        // query params
        if (is_array($location)) {
            $location = ObjectSerializer::serializeCollection($location, '', true);
        }
        if ($location !== null) {
            $queryParams['location'] = $location;
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if (is_array($locked)) {
            $locked = ObjectSerializer::serializeCollection($locked, '', true);
        }
        if ($locked !== null) {
            $queryParams['locked'] = $locked;
        }
        // query params
        if (is_array($scratch)) {
            $scratch = ObjectSerializer::serializeCollection($scratch, '', true);
        }
        if ($scratch !== null) {
            $queryParams['scratch'] = $scratch;
        }
        // query params
        if (is_array($cleaning)) {
            $cleaning = ObjectSerializer::serializeCollection($cleaning, '', true);
        }
        if ($cleaning !== null) {
            $queryParams['cleaning'] = $cleaning;
        }
        // query params
        if (is_array($write_protect)) {
            $write_protect = ObjectSerializer::serializeCollection($write_protect, '', true);
        }
        if ($write_protect !== null) {
            $queryParams['write_protect'] = $write_protect;
        }
        // query params
        if (is_array($mounted)) {
            $mounted = ObjectSerializer::serializeCollection($mounted, '', true);
        }
        if ($mounted !== null) {
            $queryParams['mounted'] = $mounted;
        }
        // query params
        if (is_array($ejected)) {
            $ejected = ObjectSerializer::serializeCollection($ejected, '', true);
        }
        if ($ejected !== null) {
            $queryParams['ejected'] = $ejected;
        }
        // query params
        if (is_array($known)) {
            $known = ObjectSerializer::serializeCollection($known, '', true);
        }
        if ($known !== null) {
            $queryParams['known'] = $known;
        }
        // query params
        if (is_array($mount_count)) {
            $mount_count = ObjectSerializer::serializeCollection($mount_count, '', true);
        }
        if ($mount_count !== null) {
            $queryParams['mount_count'] = $mount_count;
        }
        // query params
        if (is_array($date_in)) {
            $date_in = ObjectSerializer::serializeCollection($date_in, '', true);
        }
        if ($date_in !== null) {
            $queryParams['date_in'] = $date_in;
        }
        // query params
        if (is_array($date_move)) {
            $date_move = ObjectSerializer::serializeCollection($date_move, '', true);
        }
        if ($date_move !== null) {
            $queryParams['date_move'] = $date_move;
        }
        // query params
        if (is_array($free)) {
            $free = ObjectSerializer::serializeCollection($free, '', true);
        }
        if ($free !== null) {
            $queryParams['free'] = $free;
        }
        // query params
        if (is_array($max)) {
            $max = ObjectSerializer::serializeCollection($max, '', true);
        }
        if ($max !== null) {
            $queryParams['max'] = $max;
        }
        // query params
        if (is_array($last_size_update)) {
            $last_size_update = ObjectSerializer::serializeCollection($last_size_update, '', true);
        }
        if ($last_size_update !== null) {
            $queryParams['last_size_update'] = $last_size_update;
        }
        // query params
        if (is_array($last_maintenance)) {
            $last_maintenance = ObjectSerializer::serializeCollection($last_maintenance, '', true);
        }
        if ($last_maintenance !== null) {
            $queryParams['last_maintenance'] = $last_maintenance;
        }
        // query params
        if (is_array($last_repack)) {
            $last_repack = ObjectSerializer::serializeCollection($last_repack, '', true);
        }
        if ($last_repack !== null) {
            $queryParams['last_repack'] = $last_repack;
        }
        // query params
        if (is_array($repack_status)) {
            $repack_status = ObjectSerializer::serializeCollection($repack_status, '', true);
        }
        if ($repack_status !== null) {
            $queryParams['repack_status'] = $repack_status;
        }
        // query params
        if (is_array($hash)) {
            $hash = ObjectSerializer::serializeCollection($hash, '', true);
        }
        if ($hash !== null) {
            $queryParams['hash'] = $hash;
        }
        // query params
        if (is_array($force_import_type)) {
            $force_import_type = ObjectSerializer::serializeCollection($force_import_type, '', true);
        }
        if ($force_import_type !== null) {
            $queryParams['force_import_type'] = $force_import_type;
        }
        // query params
        if (is_array($need_to_check)) {
            $need_to_check = ObjectSerializer::serializeCollection($need_to_check, '', true);
        }
        if ($need_to_check !== null) {
            $queryParams['need_to_check'] = $need_to_check;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexTapesByPool
     *
     * Lists all tapes.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeCollection
     */
    public function indexTapesByPool($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        list($response) = $this->indexTapesByPoolWithHttpInfo($pool_id, $limit, $offset, $sort_by, $id, $tape_library_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);
        return $response;
    }

    /**
     * Operation indexTapesByPoolWithHttpInfo
     *
     * Lists all tapes.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTapesByPoolWithHttpInfo($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        $request = $this->indexTapesByPoolRequest($pool_id, $limit, $offset, $sort_by, $id, $tape_library_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTapesByPoolAsync
     *
     * Lists all tapes.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapesByPoolAsync($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        return $this->indexTapesByPoolAsyncWithHttpInfo($pool_id, $limit, $offset, $sort_by, $id, $tape_library_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTapesByPoolAsyncWithHttpInfo
     *
     * Lists all tapes.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapesByPoolAsyncWithHttpInfo($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeCollection';
        $request = $this->indexTapesByPoolRequest($pool_id, $limit, $offset, $sort_by, $id, $tape_library_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTapesByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $tape_library_id Filter on tape library id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTapesByPoolRequest($pool_id, $limit = null, $offset = null, $sort_by = null, $id = null, $tape_library_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling indexTapesByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/tapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($tape_library_id)) {
            $tape_library_id = ObjectSerializer::serializeCollection($tape_library_id, '', true);
        }
        if ($tape_library_id !== null) {
            $queryParams['tape_library_id'] = $tape_library_id;
        }
        // query params
        if (is_array($barcode)) {
            $barcode = ObjectSerializer::serializeCollection($barcode, '', true);
        }
        if ($barcode !== null) {
            $queryParams['barcode'] = $barcode;
        }
        // query params
        if (is_array($location)) {
            $location = ObjectSerializer::serializeCollection($location, '', true);
        }
        if ($location !== null) {
            $queryParams['location'] = $location;
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if (is_array($locked)) {
            $locked = ObjectSerializer::serializeCollection($locked, '', true);
        }
        if ($locked !== null) {
            $queryParams['locked'] = $locked;
        }
        // query params
        if (is_array($scratch)) {
            $scratch = ObjectSerializer::serializeCollection($scratch, '', true);
        }
        if ($scratch !== null) {
            $queryParams['scratch'] = $scratch;
        }
        // query params
        if (is_array($cleaning)) {
            $cleaning = ObjectSerializer::serializeCollection($cleaning, '', true);
        }
        if ($cleaning !== null) {
            $queryParams['cleaning'] = $cleaning;
        }
        // query params
        if (is_array($write_protect)) {
            $write_protect = ObjectSerializer::serializeCollection($write_protect, '', true);
        }
        if ($write_protect !== null) {
            $queryParams['write_protect'] = $write_protect;
        }
        // query params
        if (is_array($mounted)) {
            $mounted = ObjectSerializer::serializeCollection($mounted, '', true);
        }
        if ($mounted !== null) {
            $queryParams['mounted'] = $mounted;
        }
        // query params
        if (is_array($ejected)) {
            $ejected = ObjectSerializer::serializeCollection($ejected, '', true);
        }
        if ($ejected !== null) {
            $queryParams['ejected'] = $ejected;
        }
        // query params
        if (is_array($known)) {
            $known = ObjectSerializer::serializeCollection($known, '', true);
        }
        if ($known !== null) {
            $queryParams['known'] = $known;
        }
        // query params
        if (is_array($mount_count)) {
            $mount_count = ObjectSerializer::serializeCollection($mount_count, '', true);
        }
        if ($mount_count !== null) {
            $queryParams['mount_count'] = $mount_count;
        }
        // query params
        if (is_array($date_in)) {
            $date_in = ObjectSerializer::serializeCollection($date_in, '', true);
        }
        if ($date_in !== null) {
            $queryParams['date_in'] = $date_in;
        }
        // query params
        if (is_array($date_move)) {
            $date_move = ObjectSerializer::serializeCollection($date_move, '', true);
        }
        if ($date_move !== null) {
            $queryParams['date_move'] = $date_move;
        }
        // query params
        if (is_array($free)) {
            $free = ObjectSerializer::serializeCollection($free, '', true);
        }
        if ($free !== null) {
            $queryParams['free'] = $free;
        }
        // query params
        if (is_array($max)) {
            $max = ObjectSerializer::serializeCollection($max, '', true);
        }
        if ($max !== null) {
            $queryParams['max'] = $max;
        }
        // query params
        if (is_array($last_size_update)) {
            $last_size_update = ObjectSerializer::serializeCollection($last_size_update, '', true);
        }
        if ($last_size_update !== null) {
            $queryParams['last_size_update'] = $last_size_update;
        }
        // query params
        if (is_array($last_maintenance)) {
            $last_maintenance = ObjectSerializer::serializeCollection($last_maintenance, '', true);
        }
        if ($last_maintenance !== null) {
            $queryParams['last_maintenance'] = $last_maintenance;
        }
        // query params
        if (is_array($last_repack)) {
            $last_repack = ObjectSerializer::serializeCollection($last_repack, '', true);
        }
        if ($last_repack !== null) {
            $queryParams['last_repack'] = $last_repack;
        }
        // query params
        if (is_array($repack_status)) {
            $repack_status = ObjectSerializer::serializeCollection($repack_status, '', true);
        }
        if ($repack_status !== null) {
            $queryParams['repack_status'] = $repack_status;
        }
        // query params
        if (is_array($hash)) {
            $hash = ObjectSerializer::serializeCollection($hash, '', true);
        }
        if ($hash !== null) {
            $queryParams['hash'] = $hash;
        }
        // query params
        if (is_array($force_import_type)) {
            $force_import_type = ObjectSerializer::serializeCollection($force_import_type, '', true);
        }
        if ($force_import_type !== null) {
            $queryParams['force_import_type'] = $force_import_type;
        }
        // query params
        if (is_array($need_to_check)) {
            $need_to_check = ObjectSerializer::serializeCollection($need_to_check, '', true);
        }
        if ($need_to_check !== null) {
            $queryParams['need_to_check'] = $need_to_check;
        }


        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexTapesByTapeLibrary
     *
     * Lists all tapes.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeCollection
     */
    public function indexTapesByTapeLibrary($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        list($response) = $this->indexTapesByTapeLibraryWithHttpInfo($tape_library_id, $limit, $offset, $sort_by, $id, $pool_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);
        return $response;
    }

    /**
     * Operation indexTapesByTapeLibraryWithHttpInfo
     *
     * Lists all tapes.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function indexTapesByTapeLibraryWithHttpInfo($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        $request = $this->indexTapesByTapeLibraryRequest($tape_library_id, $limit, $offset, $sort_by, $id, $pool_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexTapesByTapeLibraryAsync
     *
     * Lists all tapes.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapesByTapeLibraryAsync($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        return $this->indexTapesByTapeLibraryAsyncWithHttpInfo($tape_library_id, $limit, $offset, $sort_by, $id, $pool_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexTapesByTapeLibraryAsyncWithHttpInfo
     *
     * Lists all tapes.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function indexTapesByTapeLibraryAsyncWithHttpInfo($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeCollection';
        $request = $this->indexTapesByTapeLibraryRequest($tape_library_id, $limit, $offset, $sort_by, $id, $pool_id, $barcode, $location, $type, $locked, $scratch, $cleaning, $write_protect, $mounted, $ejected, $known, $mount_count, $date_in, $date_move, $free, $max, $last_size_update, $last_maintenance, $last_repack, $repack_status, $hash, $force_import_type, $need_to_check);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexTapesByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  int $limit The number of items to display for pagination. (optional)
     * @param  int $offset The number of items to skip for pagination. (optional)
     * @param  string[] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param  string $id Filter on id (optional)
     * @param  string $pool_id Filter on a pool id (optional)
     * @param  string $barcode Filter on barcode (optional)
     * @param  string $location Filter on location (optional)
     * @param  string $type Filter on type (optional)
     * @param  string $locked Filter on locked (optional)
     * @param  string $scratch Filter on scratch (optional)
     * @param  string $cleaning Filter on cleaning (optional)
     * @param  string $write_protect Filter on write protect (optional)
     * @param  string $mounted Filter on mounted (optional)
     * @param  string $ejected Filter on ejected (optional)
     * @param  string $known Filter on known (optional)
     * @param  string $mount_count Filter on mount count (optional)
     * @param  string $date_in Filter on date in (optional)
     * @param  string $date_move Filter on date move (optional)
     * @param  string $free Filter on free (optional)
     * @param  string $max Filter on max (optional)
     * @param  string $last_size_update Filter on last size update (optional)
     * @param  string $last_maintenance Filter on last maintenance (optional)
     * @param  string $last_repack Filter on last repack (optional)
     * @param  string $repack_status Filter on repack status (optional)
     * @param  string $hash Filter on hash (optional)
     * @param  string $force_import_type Filter on force import type (optional)
     * @param  string $need_to_check Filter on need to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function indexTapesByTapeLibraryRequest($tape_library_id, $limit = null, $offset = null, $sort_by = null, $id = null, $pool_id = null, $barcode = null, $location = null, $type = null, $locked = null, $scratch = null, $cleaning = null, $write_protect = null, $mounted = null, $ejected = null, $known = null, $mount_count = null, $date_in = null, $date_move = null, $free = null, $max = null, $last_size_update = null, $last_maintenance = null, $last_repack = null, $repack_status = null, $hash = null, $force_import_type = null, $need_to_check = null)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling indexTapesByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, 'pipeDelimited', true);
        }
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $sort_by;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($pool_id)) {
            $pool_id = ObjectSerializer::serializeCollection($pool_id, '', true);
        }
        if ($pool_id !== null) {
            $queryParams['pool_id'] = $pool_id;
        }
        // query params
        if (is_array($barcode)) {
            $barcode = ObjectSerializer::serializeCollection($barcode, '', true);
        }
        if ($barcode !== null) {
            $queryParams['barcode'] = $barcode;
        }
        // query params
        if (is_array($location)) {
            $location = ObjectSerializer::serializeCollection($location, '', true);
        }
        if ($location !== null) {
            $queryParams['location'] = $location;
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if (is_array($locked)) {
            $locked = ObjectSerializer::serializeCollection($locked, '', true);
        }
        if ($locked !== null) {
            $queryParams['locked'] = $locked;
        }
        // query params
        if (is_array($scratch)) {
            $scratch = ObjectSerializer::serializeCollection($scratch, '', true);
        }
        if ($scratch !== null) {
            $queryParams['scratch'] = $scratch;
        }
        // query params
        if (is_array($cleaning)) {
            $cleaning = ObjectSerializer::serializeCollection($cleaning, '', true);
        }
        if ($cleaning !== null) {
            $queryParams['cleaning'] = $cleaning;
        }
        // query params
        if (is_array($write_protect)) {
            $write_protect = ObjectSerializer::serializeCollection($write_protect, '', true);
        }
        if ($write_protect !== null) {
            $queryParams['write_protect'] = $write_protect;
        }
        // query params
        if (is_array($mounted)) {
            $mounted = ObjectSerializer::serializeCollection($mounted, '', true);
        }
        if ($mounted !== null) {
            $queryParams['mounted'] = $mounted;
        }
        // query params
        if (is_array($ejected)) {
            $ejected = ObjectSerializer::serializeCollection($ejected, '', true);
        }
        if ($ejected !== null) {
            $queryParams['ejected'] = $ejected;
        }
        // query params
        if (is_array($known)) {
            $known = ObjectSerializer::serializeCollection($known, '', true);
        }
        if ($known !== null) {
            $queryParams['known'] = $known;
        }
        // query params
        if (is_array($mount_count)) {
            $mount_count = ObjectSerializer::serializeCollection($mount_count, '', true);
        }
        if ($mount_count !== null) {
            $queryParams['mount_count'] = $mount_count;
        }
        // query params
        if (is_array($date_in)) {
            $date_in = ObjectSerializer::serializeCollection($date_in, '', true);
        }
        if ($date_in !== null) {
            $queryParams['date_in'] = $date_in;
        }
        // query params
        if (is_array($date_move)) {
            $date_move = ObjectSerializer::serializeCollection($date_move, '', true);
        }
        if ($date_move !== null) {
            $queryParams['date_move'] = $date_move;
        }
        // query params
        if (is_array($free)) {
            $free = ObjectSerializer::serializeCollection($free, '', true);
        }
        if ($free !== null) {
            $queryParams['free'] = $free;
        }
        // query params
        if (is_array($max)) {
            $max = ObjectSerializer::serializeCollection($max, '', true);
        }
        if ($max !== null) {
            $queryParams['max'] = $max;
        }
        // query params
        if (is_array($last_size_update)) {
            $last_size_update = ObjectSerializer::serializeCollection($last_size_update, '', true);
        }
        if ($last_size_update !== null) {
            $queryParams['last_size_update'] = $last_size_update;
        }
        // query params
        if (is_array($last_maintenance)) {
            $last_maintenance = ObjectSerializer::serializeCollection($last_maintenance, '', true);
        }
        if ($last_maintenance !== null) {
            $queryParams['last_maintenance'] = $last_maintenance;
        }
        // query params
        if (is_array($last_repack)) {
            $last_repack = ObjectSerializer::serializeCollection($last_repack, '', true);
        }
        if ($last_repack !== null) {
            $queryParams['last_repack'] = $last_repack;
        }
        // query params
        if (is_array($repack_status)) {
            $repack_status = ObjectSerializer::serializeCollection($repack_status, '', true);
        }
        if ($repack_status !== null) {
            $queryParams['repack_status'] = $repack_status;
        }
        // query params
        if (is_array($hash)) {
            $hash = ObjectSerializer::serializeCollection($hash, '', true);
        }
        if ($hash !== null) {
            $queryParams['hash'] = $hash;
        }
        // query params
        if (is_array($force_import_type)) {
            $force_import_type = ObjectSerializer::serializeCollection($force_import_type, '', true);
        }
        if ($force_import_type !== null) {
            $queryParams['force_import_type'] = $force_import_type;
        }
        // query params
        if (is_array($need_to_check)) {
            $need_to_check = ObjectSerializer::serializeCollection($need_to_check, '', true);
        }
        if ($need_to_check !== null) {
            $queryParams['need_to_check'] = $need_to_check;
        }


        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusTape
     *
     * Get mount status of Tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusTape($tape_id)
    {
        list($response) = $this->mountStatusTapeWithHttpInfo($tape_id);
        return $response;
    }

    /**
     * Operation mountStatusTapeWithHttpInfo
     *
     * Get mount status of Tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusTapeWithHttpInfo($tape_id)
    {
        $request = $this->mountStatusTapeRequest($tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusTapeAsync
     *
     * Get mount status of Tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusTapeAsync($tape_id)
    {
        return $this->mountStatusTapeAsyncWithHttpInfo($tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusTapeAsyncWithHttpInfo
     *
     * Get mount status of Tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusTapeAsyncWithHttpInfo($tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusTapeRequest($tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusTape'
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusTapeRequest($tape_id)
    {
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling mountStatusTape'
            );
        }

        $resourcePath = '/tapes/{tape_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusTapeByPool
     *
     * Get mount status of Tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusTapeByPool($pool_id, $tape_id)
    {
        list($response) = $this->mountStatusTapeByPoolWithHttpInfo($pool_id, $tape_id);
        return $response;
    }

    /**
     * Operation mountStatusTapeByPoolWithHttpInfo
     *
     * Get mount status of Tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusTapeByPoolWithHttpInfo($pool_id, $tape_id)
    {
        $request = $this->mountStatusTapeByPoolRequest($pool_id, $tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusTapeByPoolAsync
     *
     * Get mount status of Tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusTapeByPoolAsync($pool_id, $tape_id)
    {
        return $this->mountStatusTapeByPoolAsyncWithHttpInfo($pool_id, $tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusTapeByPoolAsyncWithHttpInfo
     *
     * Get mount status of Tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusTapeByPoolAsyncWithHttpInfo($pool_id, $tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusTapeByPoolRequest($pool_id, $tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusTapeByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusTapeByPoolRequest($pool_id, $tape_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling mountStatusTapeByPool'
            );
        }
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling mountStatusTapeByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/tapes/{tape_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mountStatusTapeByTapeLibrary
     *
     * Get mount status of Tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error
     */
    public function mountStatusTapeByTapeLibrary($tape_library_id, $tape_id)
    {
        list($response) = $this->mountStatusTapeByTapeLibraryWithHttpInfo($tape_library_id, $tape_id);
        return $response;
    }

    /**
     * Operation mountStatusTapeByTapeLibraryWithHttpInfo
     *
     * Get mount status of Tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\MountStatus|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function mountStatusTapeByTapeLibraryWithHttpInfo($tape_library_id, $tape_id)
    {
        $request = $this->mountStatusTapeByTapeLibraryRequest($tape_library_id, $tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\MountStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\MountStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\MountStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\MountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mountStatusTapeByTapeLibraryAsync
     *
     * Get mount status of Tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusTapeByTapeLibraryAsync($tape_library_id, $tape_id)
    {
        return $this->mountStatusTapeByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mountStatusTapeByTapeLibraryAsyncWithHttpInfo
     *
     * Get mount status of Tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mountStatusTapeByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\MountStatus';
        $request = $this->mountStatusTapeByTapeLibraryRequest($tape_library_id, $tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mountStatusTapeByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mountStatusTapeByTapeLibraryRequest($tape_library_id, $tape_id)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling mountStatusTapeByTapeLibrary'
            );
        }
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling mountStatusTapeByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tapes/{tape_id}/mount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTape
     *
     * Displays a specific tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\Tape|\NodeumSDK\Client\Model\Error
     */
    public function showTape($tape_id)
    {
        list($response) = $this->showTapeWithHttpInfo($tape_id);
        return $response;
    }

    /**
     * Operation showTapeWithHttpInfo
     *
     * Displays a specific tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\Tape|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTapeWithHttpInfo($tape_id)
    {
        $request = $this->showTapeRequest($tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\Tape' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Tape', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\Tape';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Tape',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTapeAsync
     *
     * Displays a specific tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeAsync($tape_id)
    {
        return $this->showTapeAsyncWithHttpInfo($tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTapeAsyncWithHttpInfo
     *
     * Displays a specific tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeAsyncWithHttpInfo($tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\Tape';
        $request = $this->showTapeRequest($tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTape'
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTapeRequest($tape_id)
    {
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling showTape'
            );
        }

        $resourcePath = '/tapes/{tape_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTapeByPool
     *
     * Displays a specific tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\Tape|\NodeumSDK\Client\Model\Error
     */
    public function showTapeByPool($pool_id, $tape_id)
    {
        list($response) = $this->showTapeByPoolWithHttpInfo($pool_id, $tape_id);
        return $response;
    }

    /**
     * Operation showTapeByPoolWithHttpInfo
     *
     * Displays a specific tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\Tape|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTapeByPoolWithHttpInfo($pool_id, $tape_id)
    {
        $request = $this->showTapeByPoolRequest($pool_id, $tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\Tape' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Tape', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\Tape';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Tape',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTapeByPoolAsync
     *
     * Displays a specific tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeByPoolAsync($pool_id, $tape_id)
    {
        return $this->showTapeByPoolAsyncWithHttpInfo($pool_id, $tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTapeByPoolAsyncWithHttpInfo
     *
     * Displays a specific tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeByPoolAsyncWithHttpInfo($pool_id, $tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\Tape';
        $request = $this->showTapeByPoolRequest($pool_id, $tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTapeByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTapeByPoolRequest($pool_id, $tape_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling showTapeByPool'
            );
        }
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling showTapeByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/tapes/{tape_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTapeByTapeLibrary
     *
     * Displays a specific tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\Tape|\NodeumSDK\Client\Model\Error
     */
    public function showTapeByTapeLibrary($tape_library_id, $tape_id)
    {
        list($response) = $this->showTapeByTapeLibraryWithHttpInfo($tape_library_id, $tape_id);
        return $response;
    }

    /**
     * Operation showTapeByTapeLibraryWithHttpInfo
     *
     * Displays a specific tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\Tape|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTapeByTapeLibraryWithHttpInfo($tape_library_id, $tape_id)
    {
        $request = $this->showTapeByTapeLibraryRequest($tape_library_id, $tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\Tape' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Tape', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\Tape';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Tape',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTapeByTapeLibraryAsync
     *
     * Displays a specific tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeByTapeLibraryAsync($tape_library_id, $tape_id)
    {
        return $this->showTapeByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTapeByTapeLibraryAsyncWithHttpInfo
     *
     * Displays a specific tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\Tape';
        $request = $this->showTapeByTapeLibraryRequest($tape_library_id, $tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTapeByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTapeByTapeLibraryRequest($tape_library_id, $tape_id)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling showTapeByTapeLibrary'
            );
        }
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling showTapeByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tapes/{tape_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTapeStat
     *
     * Display statistic for a specific tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeStat|\NodeumSDK\Client\Model\Error
     */
    public function showTapeStat($tape_id)
    {
        list($response) = $this->showTapeStatWithHttpInfo($tape_id);
        return $response;
    }

    /**
     * Operation showTapeStatWithHttpInfo
     *
     * Display statistic for a specific tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeStat|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTapeStatWithHttpInfo($tape_id)
    {
        $request = $this->showTapeStatRequest($tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeStat' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeStat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeStat';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeStat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTapeStatAsync
     *
     * Display statistic for a specific tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeStatAsync($tape_id)
    {
        return $this->showTapeStatAsyncWithHttpInfo($tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTapeStatAsyncWithHttpInfo
     *
     * Display statistic for a specific tape.
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeStatAsyncWithHttpInfo($tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeStat';
        $request = $this->showTapeStatRequest($tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTapeStat'
     *
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTapeStatRequest($tape_id)
    {
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling showTapeStat'
            );
        }

        $resourcePath = '/tapes/{tape_id}/tape_stat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTapeStatByPool
     *
     * Display statistic for a specific tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeStat|\NodeumSDK\Client\Model\Error
     */
    public function showTapeStatByPool($pool_id, $tape_id)
    {
        list($response) = $this->showTapeStatByPoolWithHttpInfo($pool_id, $tape_id);
        return $response;
    }

    /**
     * Operation showTapeStatByPoolWithHttpInfo
     *
     * Display statistic for a specific tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeStat|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTapeStatByPoolWithHttpInfo($pool_id, $tape_id)
    {
        $request = $this->showTapeStatByPoolRequest($pool_id, $tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeStat' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeStat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeStat';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeStat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTapeStatByPoolAsync
     *
     * Display statistic for a specific tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeStatByPoolAsync($pool_id, $tape_id)
    {
        return $this->showTapeStatByPoolAsyncWithHttpInfo($pool_id, $tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTapeStatByPoolAsyncWithHttpInfo
     *
     * Display statistic for a specific tape.
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeStatByPoolAsyncWithHttpInfo($pool_id, $tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeStat';
        $request = $this->showTapeStatByPoolRequest($pool_id, $tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTapeStatByPool'
     *
     * @param  string $pool_id Numeric ID, or name of pool. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTapeStatByPoolRequest($pool_id, $tape_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling showTapeStatByPool'
            );
        }
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling showTapeStatByPool'
            );
        }

        $resourcePath = '/pools/{pool_id}/tapes/{tape_id}/tape_stat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pool_id' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTapeStatByTapeLibrary
     *
     * Display statistic for a specific tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NodeumSDK\Client\Model\TapeStat|\NodeumSDK\Client\Model\Error
     */
    public function showTapeStatByTapeLibrary($tape_library_id, $tape_id)
    {
        list($response) = $this->showTapeStatByTapeLibraryWithHttpInfo($tape_library_id, $tape_id);
        return $response;
    }

    /**
     * Operation showTapeStatByTapeLibraryWithHttpInfo
     *
     * Display statistic for a specific tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \NodeumSDK\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NodeumSDK\Client\Model\TapeStat|\NodeumSDK\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTapeStatByTapeLibraryWithHttpInfo($tape_library_id, $tape_id)
    {
        $request = $this->showTapeStatByTapeLibraryRequest($tape_library_id, $tape_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NodeumSDK\Client\Model\TapeStat' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\TapeStat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\NodeumSDK\Client\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NodeumSDK\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NodeumSDK\Client\Model\TapeStat';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\TapeStat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NodeumSDK\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTapeStatByTapeLibraryAsync
     *
     * Display statistic for a specific tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeStatByTapeLibraryAsync($tape_library_id, $tape_id)
    {
        return $this->showTapeStatByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTapeStatByTapeLibraryAsyncWithHttpInfo
     *
     * Display statistic for a specific tape.
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTapeStatByTapeLibraryAsyncWithHttpInfo($tape_library_id, $tape_id)
    {
        $returnType = '\NodeumSDK\Client\Model\TapeStat';
        $request = $this->showTapeStatByTapeLibraryRequest($tape_library_id, $tape_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTapeStatByTapeLibrary'
     *
     * @param  string $tape_library_id Numeric ID, serial, or name of tape library. (required)
     * @param  string $tape_id Numeric ID, or barcode of tape. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showTapeStatByTapeLibraryRequest($tape_library_id, $tape_id)
    {
        // verify the required parameter 'tape_library_id' is set
        if ($tape_library_id === null || (is_array($tape_library_id) && count($tape_library_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_library_id when calling showTapeStatByTapeLibrary'
            );
        }
        // verify the required parameter 'tape_id' is set
        if ($tape_id === null || (is_array($tape_id) && count($tape_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tape_id when calling showTapeStatByTapeLibrary'
            );
        }

        $resourcePath = '/tape_libraries/{tape_library_id}/tapes/{tape_id}/tape_stat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tape_library_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_library_id' . '}',
                ObjectSerializer::toPathValue($tape_library_id),
                $resourcePath
            );
        }
        // path params
        if ($tape_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tape_id' . '}',
                ObjectSerializer::toPathValue($tape_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
